"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/proxy-from-env";
exports.ids = ["vendor-chunks/proxy-from-env"];
exports.modules = {

/***/ "(ssr)/./node_modules/proxy-from-env/index.js":
/*!**********************************************!*\
  !*** ./node_modules/proxy-from-env/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n\r\nvar parseUrl = (__webpack_require__(/*! url */ \"url\").parse);\r\n\r\nvar DEFAULT_PORTS = {\r\n  ftp: 21,\r\n  gopher: 70,\r\n  http: 80,\r\n  https: 443,\r\n  ws: 80,\r\n  wss: 443,\r\n};\r\n\r\nvar stringEndsWith = String.prototype.endsWith || function(s) {\r\n  return s.length <= this.length &&\r\n    this.indexOf(s, this.length - s.length) !== -1;\r\n};\r\n\r\n/**\r\n * @param {string|object} url - The URL, or the result from url.parse.\r\n * @return {string} The URL of the proxy that should handle the request to the\r\n *  given URL. If no proxy is set, this will be an empty string.\r\n */\r\nfunction getProxyForUrl(url) {\r\n  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};\r\n  var proto = parsedUrl.protocol;\r\n  var hostname = parsedUrl.host;\r\n  var port = parsedUrl.port;\r\n  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {\r\n    return '';  // Don't proxy URLs without a valid scheme or host.\r\n  }\r\n\r\n  proto = proto.split(':', 1)[0];\r\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\r\n  // sure that the brackets around IPv6 addresses are kept.\r\n  hostname = hostname.replace(/:\\d*$/, '');\r\n  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;\r\n  if (!shouldProxy(hostname, port)) {\r\n    return '';  // Don't proxy URLs that match NO_PROXY.\r\n  }\r\n\r\n  var proxy =\r\n    getEnv('npm_config_' + proto + '_proxy') ||\r\n    getEnv(proto + '_proxy') ||\r\n    getEnv('npm_config_proxy') ||\r\n    getEnv('all_proxy');\r\n  if (proxy && proxy.indexOf('://') === -1) {\r\n    // Missing scheme in proxy, default to the requested URL's scheme.\r\n    proxy = proto + '://' + proxy;\r\n  }\r\n  return proxy;\r\n}\r\n\r\n/**\r\n * Determines whether a given URL should be proxied.\r\n *\r\n * @param {string} hostname - The host name of the URL.\r\n * @param {number} port - The effective port of the URL.\r\n * @returns {boolean} Whether the given URL should be proxied.\r\n * @private\r\n */\r\nfunction shouldProxy(hostname, port) {\r\n  var NO_PROXY =\r\n    (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();\r\n  if (!NO_PROXY) {\r\n    return true;  // Always proxy if NO_PROXY is not set.\r\n  }\r\n  if (NO_PROXY === '*') {\r\n    return false;  // Never proxy if wildcard is set.\r\n  }\r\n\r\n  return NO_PROXY.split(/[,\\s]/).every(function(proxy) {\r\n    if (!proxy) {\r\n      return true;  // Skip zero-length hosts.\r\n    }\r\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\r\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\r\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\r\n    if (parsedProxyPort && parsedProxyPort !== port) {\r\n      return true;  // Skip if ports don't match.\r\n    }\r\n\r\n    if (!/^[.*]/.test(parsedProxyHostname)) {\r\n      // No wildcards, so stop proxying if there is an exact match.\r\n      return hostname !== parsedProxyHostname;\r\n    }\r\n\r\n    if (parsedProxyHostname.charAt(0) === '*') {\r\n      // Remove leading wildcard.\r\n      parsedProxyHostname = parsedProxyHostname.slice(1);\r\n    }\r\n    // Stop proxying if the hostname ends with the no_proxy host.\r\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\r\n  });\r\n}\r\n\r\n/**\r\n * Get the value for an environment variable.\r\n *\r\n * @param {string} key - The name of the environment variable.\r\n * @return {string} The value of the environment variable.\r\n * @private\r\n */\r\nfunction getEnv(key) {\r\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\r\n}\r\n\r\nexports.getProxyForUrl = getProxyForUrl;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJveHktZnJvbS1lbnYvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLGVBQWUsNkNBQW9CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVzdF9jb3Vyc2UvLi9ub2RlX21vZHVsZXMvcHJveHktZnJvbS1lbnYvaW5kZXguanM/OTcxMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgcGFyc2VVcmwgPSByZXF1aXJlKCd1cmwnKS5wYXJzZTtcclxuXHJcbnZhciBERUZBVUxUX1BPUlRTID0ge1xyXG4gIGZ0cDogMjEsXHJcbiAgZ29waGVyOiA3MCxcclxuICBodHRwOiA4MCxcclxuICBodHRwczogNDQzLFxyXG4gIHdzOiA4MCxcclxuICB3c3M6IDQ0MyxcclxufTtcclxuXHJcbnZhciBzdHJpbmdFbmRzV2l0aCA9IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGggfHwgZnVuY3Rpb24ocykge1xyXG4gIHJldHVybiBzLmxlbmd0aCA8PSB0aGlzLmxlbmd0aCAmJlxyXG4gICAgdGhpcy5pbmRleE9mKHMsIHRoaXMubGVuZ3RoIC0gcy5sZW5ndGgpICE9PSAtMTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHVybCAtIFRoZSBVUkwsIG9yIHRoZSByZXN1bHQgZnJvbSB1cmwucGFyc2UuXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVSTCBvZiB0aGUgcHJveHkgdGhhdCBzaG91bGQgaGFuZGxlIHRoZSByZXF1ZXN0IHRvIHRoZVxyXG4gKiAgZ2l2ZW4gVVJMLiBJZiBubyBwcm94eSBpcyBzZXQsIHRoaXMgd2lsbCBiZSBhbiBlbXB0eSBzdHJpbmcuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRQcm94eUZvclVybCh1cmwpIHtcclxuICB2YXIgcGFyc2VkVXJsID0gdHlwZW9mIHVybCA9PT0gJ3N0cmluZycgPyBwYXJzZVVybCh1cmwpIDogdXJsIHx8IHt9O1xyXG4gIHZhciBwcm90byA9IHBhcnNlZFVybC5wcm90b2NvbDtcclxuICB2YXIgaG9zdG5hbWUgPSBwYXJzZWRVcmwuaG9zdDtcclxuICB2YXIgcG9ydCA9IHBhcnNlZFVybC5wb3J0O1xyXG4gIGlmICh0eXBlb2YgaG9zdG5hbWUgIT09ICdzdHJpbmcnIHx8ICFob3N0bmFtZSB8fCB0eXBlb2YgcHJvdG8gIT09ICdzdHJpbmcnKSB7XHJcbiAgICByZXR1cm4gJyc7ICAvLyBEb24ndCBwcm94eSBVUkxzIHdpdGhvdXQgYSB2YWxpZCBzY2hlbWUgb3IgaG9zdC5cclxuICB9XHJcblxyXG4gIHByb3RvID0gcHJvdG8uc3BsaXQoJzonLCAxKVswXTtcclxuICAvLyBTdHJpcHBpbmcgcG9ydHMgaW4gdGhpcyB3YXkgaW5zdGVhZCBvZiB1c2luZyBwYXJzZWRVcmwuaG9zdG5hbWUgdG8gbWFrZVxyXG4gIC8vIHN1cmUgdGhhdCB0aGUgYnJhY2tldHMgYXJvdW5kIElQdjYgYWRkcmVzc2VzIGFyZSBrZXB0LlxyXG4gIGhvc3RuYW1lID0gaG9zdG5hbWUucmVwbGFjZSgvOlxcZCokLywgJycpO1xyXG4gIHBvcnQgPSBwYXJzZUludChwb3J0KSB8fCBERUZBVUxUX1BPUlRTW3Byb3RvXSB8fCAwO1xyXG4gIGlmICghc2hvdWxkUHJveHkoaG9zdG5hbWUsIHBvcnQpKSB7XHJcbiAgICByZXR1cm4gJyc7ICAvLyBEb24ndCBwcm94eSBVUkxzIHRoYXQgbWF0Y2ggTk9fUFJPWFkuXHJcbiAgfVxyXG5cclxuICB2YXIgcHJveHkgPVxyXG4gICAgZ2V0RW52KCducG1fY29uZmlnXycgKyBwcm90byArICdfcHJveHknKSB8fFxyXG4gICAgZ2V0RW52KHByb3RvICsgJ19wcm94eScpIHx8XHJcbiAgICBnZXRFbnYoJ25wbV9jb25maWdfcHJveHknKSB8fFxyXG4gICAgZ2V0RW52KCdhbGxfcHJveHknKTtcclxuICBpZiAocHJveHkgJiYgcHJveHkuaW5kZXhPZignOi8vJykgPT09IC0xKSB7XHJcbiAgICAvLyBNaXNzaW5nIHNjaGVtZSBpbiBwcm94eSwgZGVmYXVsdCB0byB0aGUgcmVxdWVzdGVkIFVSTCdzIHNjaGVtZS5cclxuICAgIHByb3h5ID0gcHJvdG8gKyAnOi8vJyArIHByb3h5O1xyXG4gIH1cclxuICByZXR1cm4gcHJveHk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBnaXZlbiBVUkwgc2hvdWxkIGJlIHByb3hpZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBob3N0bmFtZSAtIFRoZSBob3N0IG5hbWUgb2YgdGhlIFVSTC5cclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcnQgLSBUaGUgZWZmZWN0aXZlIHBvcnQgb2YgdGhlIFVSTC5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIFVSTCBzaG91bGQgYmUgcHJveGllZC5cclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHNob3VsZFByb3h5KGhvc3RuYW1lLCBwb3J0KSB7XHJcbiAgdmFyIE5PX1BST1hZID1cclxuICAgIChnZXRFbnYoJ25wbV9jb25maWdfbm9fcHJveHknKSB8fCBnZXRFbnYoJ25vX3Byb3h5JykpLnRvTG93ZXJDYXNlKCk7XHJcbiAgaWYgKCFOT19QUk9YWSkge1xyXG4gICAgcmV0dXJuIHRydWU7ICAvLyBBbHdheXMgcHJveHkgaWYgTk9fUFJPWFkgaXMgbm90IHNldC5cclxuICB9XHJcbiAgaWYgKE5PX1BST1hZID09PSAnKicpIHtcclxuICAgIHJldHVybiBmYWxzZTsgIC8vIE5ldmVyIHByb3h5IGlmIHdpbGRjYXJkIGlzIHNldC5cclxuICB9XHJcblxyXG4gIHJldHVybiBOT19QUk9YWS5zcGxpdCgvWyxcXHNdLykuZXZlcnkoZnVuY3Rpb24ocHJveHkpIHtcclxuICAgIGlmICghcHJveHkpIHtcclxuICAgICAgcmV0dXJuIHRydWU7ICAvLyBTa2lwIHplcm8tbGVuZ3RoIGhvc3RzLlxyXG4gICAgfVxyXG4gICAgdmFyIHBhcnNlZFByb3h5ID0gcHJveHkubWF0Y2goL14oLispOihcXGQrKSQvKTtcclxuICAgIHZhciBwYXJzZWRQcm94eUhvc3RuYW1lID0gcGFyc2VkUHJveHkgPyBwYXJzZWRQcm94eVsxXSA6IHByb3h5O1xyXG4gICAgdmFyIHBhcnNlZFByb3h5UG9ydCA9IHBhcnNlZFByb3h5ID8gcGFyc2VJbnQocGFyc2VkUHJveHlbMl0pIDogMDtcclxuICAgIGlmIChwYXJzZWRQcm94eVBvcnQgJiYgcGFyc2VkUHJveHlQb3J0ICE9PSBwb3J0KSB7XHJcbiAgICAgIHJldHVybiB0cnVlOyAgLy8gU2tpcCBpZiBwb3J0cyBkb24ndCBtYXRjaC5cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIS9eWy4qXS8udGVzdChwYXJzZWRQcm94eUhvc3RuYW1lKSkge1xyXG4gICAgICAvLyBObyB3aWxkY2FyZHMsIHNvIHN0b3AgcHJveHlpbmcgaWYgdGhlcmUgaXMgYW4gZXhhY3QgbWF0Y2guXHJcbiAgICAgIHJldHVybiBob3N0bmFtZSAhPT0gcGFyc2VkUHJveHlIb3N0bmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGFyc2VkUHJveHlIb3N0bmFtZS5jaGFyQXQoMCkgPT09ICcqJykge1xyXG4gICAgICAvLyBSZW1vdmUgbGVhZGluZyB3aWxkY2FyZC5cclxuICAgICAgcGFyc2VkUHJveHlIb3N0bmFtZSA9IHBhcnNlZFByb3h5SG9zdG5hbWUuc2xpY2UoMSk7XHJcbiAgICB9XHJcbiAgICAvLyBTdG9wIHByb3h5aW5nIGlmIHRoZSBob3N0bmFtZSBlbmRzIHdpdGggdGhlIG5vX3Byb3h5IGhvc3QuXHJcbiAgICByZXR1cm4gIXN0cmluZ0VuZHNXaXRoLmNhbGwoaG9zdG5hbWUsIHBhcnNlZFByb3h5SG9zdG5hbWUpO1xyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSB2YWx1ZSBmb3IgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgbmFtZSBvZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUuXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZhbHVlIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGdldEVudihrZXkpIHtcclxuICByZXR1cm4gcHJvY2Vzcy5lbnZba2V5LnRvTG93ZXJDYXNlKCldIHx8IHByb2Nlc3MuZW52W2tleS50b1VwcGVyQ2FzZSgpXSB8fCAnJztcclxufVxyXG5cclxuZXhwb3J0cy5nZXRQcm94eUZvclVybCA9IGdldFByb3h5Rm9yVXJsO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/proxy-from-env/index.js\n");

/***/ })

};
;