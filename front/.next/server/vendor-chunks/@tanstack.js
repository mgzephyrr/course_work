"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanstack";
exports.ids = ["vendor-chunks/@tanstack"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tanstack/react-table/build/lib/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@tanstack/react-table/build/lib/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColumnFaceting: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.ColumnFaceting),\n/* harmony export */   ColumnFiltering: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.ColumnFiltering),\n/* harmony export */   ColumnGrouping: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.ColumnGrouping),\n/* harmony export */   ColumnOrdering: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.ColumnOrdering),\n/* harmony export */   ColumnPinning: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.ColumnPinning),\n/* harmony export */   ColumnSizing: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.ColumnSizing),\n/* harmony export */   ColumnVisibility: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.ColumnVisibility),\n/* harmony export */   GlobalFaceting: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.GlobalFaceting),\n/* harmony export */   GlobalFiltering: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.GlobalFiltering),\n/* harmony export */   Headers: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.Headers),\n/* harmony export */   RowExpanding: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.RowExpanding),\n/* harmony export */   RowPagination: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.RowPagination),\n/* harmony export */   RowPinning: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.RowPinning),\n/* harmony export */   RowSelection: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.RowSelection),\n/* harmony export */   RowSorting: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.RowSorting),\n/* harmony export */   _getVisibleLeafColumns: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__._getVisibleLeafColumns),\n/* harmony export */   aggregationFns: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.aggregationFns),\n/* harmony export */   buildHeaderGroups: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.buildHeaderGroups),\n/* harmony export */   createCell: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.createCell),\n/* harmony export */   createColumn: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.createColumn),\n/* harmony export */   createColumnHelper: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.createColumnHelper),\n/* harmony export */   createRow: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.createRow),\n/* harmony export */   createTable: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.createTable),\n/* harmony export */   defaultColumnSizing: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.defaultColumnSizing),\n/* harmony export */   expandRows: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.expandRows),\n/* harmony export */   filterFns: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.filterFns),\n/* harmony export */   flattenBy: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.flattenBy),\n/* harmony export */   flexRender: () => (/* binding */ flexRender),\n/* harmony export */   functionalUpdate: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.functionalUpdate),\n/* harmony export */   getCoreRowModel: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.getCoreRowModel),\n/* harmony export */   getExpandedRowModel: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.getExpandedRowModel),\n/* harmony export */   getFacetedMinMaxValues: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.getFacetedMinMaxValues),\n/* harmony export */   getFacetedRowModel: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.getFacetedRowModel),\n/* harmony export */   getFacetedUniqueValues: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.getFacetedUniqueValues),\n/* harmony export */   getFilteredRowModel: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.getFilteredRowModel),\n/* harmony export */   getGroupedRowModel: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.getGroupedRowModel),\n/* harmony export */   getMemoOptions: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.getMemoOptions),\n/* harmony export */   getPaginationRowModel: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.getPaginationRowModel),\n/* harmony export */   getSortedRowModel: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.getSortedRowModel),\n/* harmony export */   isFunction: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.isFunction),\n/* harmony export */   isNumberArray: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.isNumberArray),\n/* harmony export */   isRowSelected: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.isRowSelected),\n/* harmony export */   isSubRowSelected: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.isSubRowSelected),\n/* harmony export */   makeStateUpdater: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.makeStateUpdater),\n/* harmony export */   memo: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.memo),\n/* harmony export */   noop: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.noop),\n/* harmony export */   orderColumns: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.orderColumns),\n/* harmony export */   passiveEventSupported: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.passiveEventSupported),\n/* harmony export */   reSplitAlphaNumeric: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.reSplitAlphaNumeric),\n/* harmony export */   selectRowsFn: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.selectRowsFn),\n/* harmony export */   shouldAutoRemoveFilter: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.shouldAutoRemoveFilter),\n/* harmony export */   sortingFns: () => (/* reexport safe */ _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.sortingFns),\n/* harmony export */   useReactTable: () => (/* binding */ useReactTable)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/table-core */ \"(ssr)/./node_modules/@tanstack/table-core/build/lib/index.mjs\");\n/**\r\n   * react-table\r\n   *\r\n   * Copyright (c) TanStack\r\n   *\r\n   * This source code is licensed under the MIT license found in the\r\n   * LICENSE.md file in the root directory of this source tree.\r\n   *\r\n   * @license MIT\r\n   */\r\n\r\n\r\n\r\n\r\n//\r\n\r\n/**\r\n * If rendering headers, cells, or footers with custom markup, use flexRender instead of `cell.getValue()` or `cell.renderValue()`.\r\n */\r\nfunction flexRender(Comp, props) {\r\n  return !Comp ? null : isReactComponent(Comp) ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Comp, props) : Comp;\r\n}\r\nfunction isReactComponent(component) {\r\n  return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\r\n}\r\nfunction isClassComponent(component) {\r\n  return typeof component === 'function' && (() => {\r\n    const proto = Object.getPrototypeOf(component);\r\n    return proto.prototype && proto.prototype.isReactComponent;\r\n  })();\r\n}\r\nfunction isExoticComponent(component) {\r\n  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\r\n}\r\nfunction useReactTable(options) {\r\n  // Compose in the generic options to the user options\r\n  const resolvedOptions = {\r\n    state: {},\r\n    // Dummy state\r\n    onStateChange: () => {},\r\n    // noop\r\n    renderFallbackValue: null,\r\n    ...options\r\n  };\r\n\r\n  // Create a new table and store it in state\r\n  const [tableRef] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => ({\r\n    current: (0,_tanstack_table_core__WEBPACK_IMPORTED_MODULE_1__.createTable)(resolvedOptions)\r\n  }));\r\n\r\n  // By default, manage table state here using the table's initial state\r\n  const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => tableRef.current.initialState);\r\n\r\n  // Compose the default state above with any user state. This will allow the user\r\n  // to only control a subset of the state if desired.\r\n  tableRef.current.setOptions(prev => ({\r\n    ...prev,\r\n    ...options,\r\n    state: {\r\n      ...state,\r\n      ...options.state\r\n    },\r\n    // Similarly, we'll maintain both our internal state and any user-provided\r\n    // state.\r\n    onStateChange: updater => {\r\n      setState(updater);\r\n      options.onStateChange == null || options.onStateChange(updater);\r\n    }\r\n  }));\r\n  return tableRef.current;\r\n}\r\n\r\n\r\n//# sourceMappingURL=index.mjs.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXRhYmxlL2J1aWxkL2xpYi9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQytCO0FBQ29CO0FBQ2Q7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsZ0RBQW1CO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDJDQUFjO0FBQ25DLGFBQWEsaUVBQVc7QUFDeEIsR0FBRztBQUNIO0FBQ0E7QUFDQSw0QkFBNEIsMkNBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDcUM7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXN0X2NvdXJzZS8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtdGFibGUvYnVpbGQvbGliL2luZGV4Lm1qcz83MzIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gICAqIHJlYWN0LXRhYmxlXHJcbiAgICpcclxuICAgKiBDb3B5cmlnaHQgKGMpIFRhblN0YWNrXHJcbiAgICpcclxuICAgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICAgKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXHJcbiAgICpcclxuICAgKiBAbGljZW5zZSBNSVRcclxuICAgKi9cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjcmVhdGVUYWJsZSB9IGZyb20gJ0B0YW5zdGFjay90YWJsZS1jb3JlJztcclxuZXhwb3J0ICogZnJvbSAnQHRhbnN0YWNrL3RhYmxlLWNvcmUnO1xyXG5cclxuLy9cclxuXHJcbi8qKlxyXG4gKiBJZiByZW5kZXJpbmcgaGVhZGVycywgY2VsbHMsIG9yIGZvb3RlcnMgd2l0aCBjdXN0b20gbWFya3VwLCB1c2UgZmxleFJlbmRlciBpbnN0ZWFkIG9mIGBjZWxsLmdldFZhbHVlKClgIG9yIGBjZWxsLnJlbmRlclZhbHVlKClgLlxyXG4gKi9cclxuZnVuY3Rpb24gZmxleFJlbmRlcihDb21wLCBwcm9wcykge1xyXG4gIHJldHVybiAhQ29tcCA/IG51bGwgOiBpc1JlYWN0Q29tcG9uZW50KENvbXApID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcCwgcHJvcHMpIDogQ29tcDtcclxufVxyXG5mdW5jdGlvbiBpc1JlYWN0Q29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gIHJldHVybiBpc0NsYXNzQ29tcG9uZW50KGNvbXBvbmVudCkgfHwgdHlwZW9mIGNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyB8fCBpc0V4b3RpY0NvbXBvbmVudChjb21wb25lbnQpO1xyXG59XHJcbmZ1bmN0aW9uIGlzQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBjb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiYgKCgpID0+IHtcclxuICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGNvbXBvbmVudCk7XHJcbiAgICByZXR1cm4gcHJvdG8ucHJvdG90eXBlICYmIHByb3RvLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50O1xyXG4gIH0pKCk7XHJcbn1cclxuZnVuY3Rpb24gaXNFeG90aWNDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBjb21wb25lbnQgPT09ICdvYmplY3QnICYmIHR5cGVvZiBjb21wb25lbnQuJCR0eXBlb2YgPT09ICdzeW1ib2wnICYmIFsncmVhY3QubWVtbycsICdyZWFjdC5mb3J3YXJkX3JlZiddLmluY2x1ZGVzKGNvbXBvbmVudC4kJHR5cGVvZi5kZXNjcmlwdGlvbik7XHJcbn1cclxuZnVuY3Rpb24gdXNlUmVhY3RUYWJsZShvcHRpb25zKSB7XHJcbiAgLy8gQ29tcG9zZSBpbiB0aGUgZ2VuZXJpYyBvcHRpb25zIHRvIHRoZSB1c2VyIG9wdGlvbnNcclxuICBjb25zdCByZXNvbHZlZE9wdGlvbnMgPSB7XHJcbiAgICBzdGF0ZToge30sXHJcbiAgICAvLyBEdW1teSBzdGF0ZVxyXG4gICAgb25TdGF0ZUNoYW5nZTogKCkgPT4ge30sXHJcbiAgICAvLyBub29wXHJcbiAgICByZW5kZXJGYWxsYmFja1ZhbHVlOiBudWxsLFxyXG4gICAgLi4ub3B0aW9uc1xyXG4gIH07XHJcblxyXG4gIC8vIENyZWF0ZSBhIG5ldyB0YWJsZSBhbmQgc3RvcmUgaXQgaW4gc3RhdGVcclxuICBjb25zdCBbdGFibGVSZWZdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gKHtcclxuICAgIGN1cnJlbnQ6IGNyZWF0ZVRhYmxlKHJlc29sdmVkT3B0aW9ucylcclxuICB9KSk7XHJcblxyXG4gIC8vIEJ5IGRlZmF1bHQsIG1hbmFnZSB0YWJsZSBzdGF0ZSBoZXJlIHVzaW5nIHRoZSB0YWJsZSdzIGluaXRpYWwgc3RhdGVcclxuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHRhYmxlUmVmLmN1cnJlbnQuaW5pdGlhbFN0YXRlKTtcclxuXHJcbiAgLy8gQ29tcG9zZSB0aGUgZGVmYXVsdCBzdGF0ZSBhYm92ZSB3aXRoIGFueSB1c2VyIHN0YXRlLiBUaGlzIHdpbGwgYWxsb3cgdGhlIHVzZXJcclxuICAvLyB0byBvbmx5IGNvbnRyb2wgYSBzdWJzZXQgb2YgdGhlIHN0YXRlIGlmIGRlc2lyZWQuXHJcbiAgdGFibGVSZWYuY3VycmVudC5zZXRPcHRpb25zKHByZXYgPT4gKHtcclxuICAgIC4uLnByZXYsXHJcbiAgICAuLi5vcHRpb25zLFxyXG4gICAgc3RhdGU6IHtcclxuICAgICAgLi4uc3RhdGUsXHJcbiAgICAgIC4uLm9wdGlvbnMuc3RhdGVcclxuICAgIH0sXHJcbiAgICAvLyBTaW1pbGFybHksIHdlJ2xsIG1haW50YWluIGJvdGggb3VyIGludGVybmFsIHN0YXRlIGFuZCBhbnkgdXNlci1wcm92aWRlZFxyXG4gICAgLy8gc3RhdGUuXHJcbiAgICBvblN0YXRlQ2hhbmdlOiB1cGRhdGVyID0+IHtcclxuICAgICAgc2V0U3RhdGUodXBkYXRlcik7XHJcbiAgICAgIG9wdGlvbnMub25TdGF0ZUNoYW5nZSA9PSBudWxsIHx8IG9wdGlvbnMub25TdGF0ZUNoYW5nZSh1cGRhdGVyKTtcclxuICAgIH1cclxuICB9KSk7XHJcbiAgcmV0dXJuIHRhYmxlUmVmLmN1cnJlbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGZsZXhSZW5kZXIsIHVzZVJlYWN0VGFibGUgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-table/build/lib/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/table-core/build/lib/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/table-core/build/lib/index.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColumnFaceting: () => (/* binding */ ColumnFaceting),\n/* harmony export */   ColumnFiltering: () => (/* binding */ ColumnFiltering),\n/* harmony export */   ColumnGrouping: () => (/* binding */ ColumnGrouping),\n/* harmony export */   ColumnOrdering: () => (/* binding */ ColumnOrdering),\n/* harmony export */   ColumnPinning: () => (/* binding */ ColumnPinning),\n/* harmony export */   ColumnSizing: () => (/* binding */ ColumnSizing),\n/* harmony export */   ColumnVisibility: () => (/* binding */ ColumnVisibility),\n/* harmony export */   GlobalFaceting: () => (/* binding */ GlobalFaceting),\n/* harmony export */   GlobalFiltering: () => (/* binding */ GlobalFiltering),\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   RowExpanding: () => (/* binding */ RowExpanding),\n/* harmony export */   RowPagination: () => (/* binding */ RowPagination),\n/* harmony export */   RowPinning: () => (/* binding */ RowPinning),\n/* harmony export */   RowSelection: () => (/* binding */ RowSelection),\n/* harmony export */   RowSorting: () => (/* binding */ RowSorting),\n/* harmony export */   _getVisibleLeafColumns: () => (/* binding */ _getVisibleLeafColumns),\n/* harmony export */   aggregationFns: () => (/* binding */ aggregationFns),\n/* harmony export */   buildHeaderGroups: () => (/* binding */ buildHeaderGroups),\n/* harmony export */   createCell: () => (/* binding */ createCell),\n/* harmony export */   createColumn: () => (/* binding */ createColumn),\n/* harmony export */   createColumnHelper: () => (/* binding */ createColumnHelper),\n/* harmony export */   createRow: () => (/* binding */ createRow),\n/* harmony export */   createTable: () => (/* binding */ createTable),\n/* harmony export */   defaultColumnSizing: () => (/* binding */ defaultColumnSizing),\n/* harmony export */   expandRows: () => (/* binding */ expandRows),\n/* harmony export */   filterFns: () => (/* binding */ filterFns),\n/* harmony export */   flattenBy: () => (/* binding */ flattenBy),\n/* harmony export */   functionalUpdate: () => (/* binding */ functionalUpdate),\n/* harmony export */   getCoreRowModel: () => (/* binding */ getCoreRowModel),\n/* harmony export */   getExpandedRowModel: () => (/* binding */ getExpandedRowModel),\n/* harmony export */   getFacetedMinMaxValues: () => (/* binding */ getFacetedMinMaxValues),\n/* harmony export */   getFacetedRowModel: () => (/* binding */ getFacetedRowModel),\n/* harmony export */   getFacetedUniqueValues: () => (/* binding */ getFacetedUniqueValues),\n/* harmony export */   getFilteredRowModel: () => (/* binding */ getFilteredRowModel),\n/* harmony export */   getGroupedRowModel: () => (/* binding */ getGroupedRowModel),\n/* harmony export */   getMemoOptions: () => (/* binding */ getMemoOptions),\n/* harmony export */   getPaginationRowModel: () => (/* binding */ getPaginationRowModel),\n/* harmony export */   getSortedRowModel: () => (/* binding */ getSortedRowModel),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isNumberArray: () => (/* binding */ isNumberArray),\n/* harmony export */   isRowSelected: () => (/* binding */ isRowSelected),\n/* harmony export */   isSubRowSelected: () => (/* binding */ isSubRowSelected),\n/* harmony export */   makeStateUpdater: () => (/* binding */ makeStateUpdater),\n/* harmony export */   memo: () => (/* binding */ memo),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   orderColumns: () => (/* binding */ orderColumns),\n/* harmony export */   passiveEventSupported: () => (/* binding */ passiveEventSupported),\n/* harmony export */   reSplitAlphaNumeric: () => (/* binding */ reSplitAlphaNumeric),\n/* harmony export */   selectRowsFn: () => (/* binding */ selectRowsFn),\n/* harmony export */   shouldAutoRemoveFilter: () => (/* binding */ shouldAutoRemoveFilter),\n/* harmony export */   sortingFns: () => (/* binding */ sortingFns)\n/* harmony export */ });\n/**\r\n   * table-core\r\n   *\r\n   * Copyright (c) TanStack\r\n   *\r\n   * This source code is licensed under the MIT license found in the\r\n   * LICENSE.md file in the root directory of this source tree.\r\n   *\r\n   * @license MIT\r\n   */\r\n// type Person = {\r\n//   firstName: string\r\n//   lastName: string\r\n//   age: number\r\n//   visits: number\r\n//   status: string\r\n//   progress: number\r\n//   createdAt: Date\r\n//   nested: {\r\n//     foo: [\r\n//       {\r\n//         bar: 'bar'\r\n//       }\r\n//     ]\r\n//     bar: { subBar: boolean }[]\r\n//     baz: {\r\n//       foo: 'foo'\r\n//       bar: {\r\n//         baz: 'baz'\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\r\n// const test2: DeepKeys<Person> = 'nested.bar'\r\n\r\n// const helper = createColumnHelper<Person>()\r\n\r\n// helper.accessor('nested.foo', {\r\n//   cell: info => info.getValue(),\r\n// })\r\n\r\n// helper.accessor('nested.foo.0.bar', {\r\n//   cell: info => info.getValue(),\r\n// })\r\n\r\n// helper.accessor('nested.bar', {\r\n//   cell: info => info.getValue(),\r\n// })\r\n\r\nfunction createColumnHelper() {\r\n  return {\r\n    accessor: (accessor, column) => {\r\n      return typeof accessor === 'function' ? {\r\n        ...column,\r\n        accessorFn: accessor\r\n      } : {\r\n        ...column,\r\n        accessorKey: accessor\r\n      };\r\n    },\r\n    display: column => column,\r\n    group: column => column\r\n  };\r\n}\r\n\r\n// Is this type a tuple?\r\n\r\n// If this type is a tuple, what indices are allowed?\r\n\r\n///\r\n\r\nfunction functionalUpdate(updater, input) {\r\n  return typeof updater === 'function' ? updater(input) : updater;\r\n}\r\nfunction noop() {\r\n  //\r\n}\r\nfunction makeStateUpdater(key, instance) {\r\n  return updater => {\r\n    instance.setState(old => {\r\n      return {\r\n        ...old,\r\n        [key]: functionalUpdate(updater, old[key])\r\n      };\r\n    });\r\n  };\r\n}\r\nfunction isFunction(d) {\r\n  return d instanceof Function;\r\n}\r\nfunction isNumberArray(d) {\r\n  return Array.isArray(d) && d.every(val => typeof val === 'number');\r\n}\r\nfunction flattenBy(arr, getChildren) {\r\n  const flat = [];\r\n  const recurse = subArr => {\r\n    subArr.forEach(item => {\r\n      flat.push(item);\r\n      const children = getChildren(item);\r\n      if (children != null && children.length) {\r\n        recurse(children);\r\n      }\r\n    });\r\n  };\r\n  recurse(arr);\r\n  return flat;\r\n}\r\nfunction memo(getDeps, fn, opts) {\r\n  let deps = [];\r\n  let result;\r\n  return depArgs => {\r\n    let depTime;\r\n    if (opts.key && opts.debug) depTime = Date.now();\r\n    const newDeps = getDeps(depArgs);\r\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\r\n    if (!depsChanged) {\r\n      return result;\r\n    }\r\n    deps = newDeps;\r\n    let resultTime;\r\n    if (opts.key && opts.debug) resultTime = Date.now();\r\n    result = fn(...newDeps);\r\n    opts == null || opts.onChange == null || opts.onChange(result);\r\n    if (opts.key && opts.debug) {\r\n      if (opts != null && opts.debug()) {\r\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\r\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\r\n        const resultFpsPercentage = resultEndTime / 16;\r\n        const pad = (str, num) => {\r\n          str = String(str);\r\n          while (str.length < num) {\r\n            str = ' ' + str;\r\n          }\r\n          return str;\r\n        };\r\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\r\n            font-size: .6rem;\r\n            font-weight: bold;\r\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n}\r\nfunction getMemoOptions(tableOptions, debugLevel, key, onChange) {\r\n  return {\r\n    debug: () => {\r\n      var _tableOptions$debugAl;\r\n      return (_tableOptions$debugAl = tableOptions == null ? void 0 : tableOptions.debugAll) != null ? _tableOptions$debugAl : tableOptions[debugLevel];\r\n    },\r\n    key:  true && key,\r\n    onChange\r\n  };\r\n}\r\n\r\nfunction createCell(table, row, column, columnId) {\r\n  const getRenderValue = () => {\r\n    var _cell$getValue;\r\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\r\n  };\r\n  const cell = {\r\n    id: `${row.id}_${column.id}`,\r\n    row,\r\n    column,\r\n    getValue: () => row.getValue(columnId),\r\n    renderValue: getRenderValue,\r\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\r\n      table,\r\n      column,\r\n      row,\r\n      cell: cell,\r\n      getValue: cell.getValue,\r\n      renderValue: cell.renderValue\r\n    }), getMemoOptions(table.options, 'debugCells', 'cell.getContext'))\r\n  };\r\n  table._features.forEach(feature => {\r\n    feature.createCell == null || feature.createCell(cell, column, row, table);\r\n  }, {});\r\n  return cell;\r\n}\r\n\r\nfunction createColumn(table, columnDef, depth, parent) {\r\n  var _ref, _resolvedColumnDef$id;\r\n  const defaultColumn = table._getDefaultColumnDef();\r\n  const resolvedColumnDef = {\r\n    ...defaultColumn,\r\n    ...columnDef\r\n  };\r\n  const accessorKey = resolvedColumnDef.accessorKey;\r\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\r\n  let accessorFn;\r\n  if (resolvedColumnDef.accessorFn) {\r\n    accessorFn = resolvedColumnDef.accessorFn;\r\n  } else if (accessorKey) {\r\n    // Support deep accessor keys\r\n    if (accessorKey.includes('.')) {\r\n      accessorFn = originalRow => {\r\n        let result = originalRow;\r\n        for (const key of accessorKey.split('.')) {\r\n          var _result;\r\n          result = (_result = result) == null ? void 0 : _result[key];\r\n          if ( true && result === undefined) {\r\n            console.warn(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\r\n          }\r\n        }\r\n        return result;\r\n      };\r\n    } else {\r\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\r\n    }\r\n  }\r\n  if (!id) {\r\n    if (true) {\r\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\r\n    }\r\n    throw new Error();\r\n  }\r\n  let column = {\r\n    id: `${String(id)}`,\r\n    accessorFn,\r\n    parent: parent,\r\n    depth,\r\n    columnDef: resolvedColumnDef,\r\n    columns: [],\r\n    getFlatColumns: memo(() => [true], () => {\r\n      var _column$columns;\r\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\r\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getFlatColumns')),\r\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\r\n      var _column$columns2;\r\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\r\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\r\n        return orderColumns(leafColumns);\r\n      }\r\n      return [column];\r\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getLeafColumns'))\r\n  };\r\n  for (const feature of table._features) {\r\n    feature.createColumn == null || feature.createColumn(column, table);\r\n  }\r\n\r\n  // Yes, we have to convert table to unknown, because we know more than the compiler here.\r\n  return column;\r\n}\r\n\r\nconst debug = 'debugHeaders';\r\n//\r\n\r\nfunction createHeader(table, column, options) {\r\n  var _options$id;\r\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\r\n  let header = {\r\n    id,\r\n    column,\r\n    index: options.index,\r\n    isPlaceholder: !!options.isPlaceholder,\r\n    placeholderId: options.placeholderId,\r\n    depth: options.depth,\r\n    subHeaders: [],\r\n    colSpan: 0,\r\n    rowSpan: 0,\r\n    headerGroup: null,\r\n    getLeafHeaders: () => {\r\n      const leafHeaders = [];\r\n      const recurseHeader = h => {\r\n        if (h.subHeaders && h.subHeaders.length) {\r\n          h.subHeaders.map(recurseHeader);\r\n        }\r\n        leafHeaders.push(h);\r\n      };\r\n      recurseHeader(header);\r\n      return leafHeaders;\r\n    },\r\n    getContext: () => ({\r\n      table,\r\n      header: header,\r\n      column\r\n    })\r\n  };\r\n  table._features.forEach(feature => {\r\n    feature.createHeader == null || feature.createHeader(header, table);\r\n  });\r\n  return header;\r\n}\r\nconst Headers = {\r\n  createTable: table => {\r\n    // Header Groups\r\n\r\n    table.getHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\r\n      var _left$map$filter, _right$map$filter;\r\n      const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\r\n      const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\r\n      const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\r\n      const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\r\n      return headerGroups;\r\n    }, getMemoOptions(table.options, debug, 'getHeaderGroups'));\r\n    table.getCenterHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\r\n      leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\r\n      return buildHeaderGroups(allColumns, leafColumns, table, 'center');\r\n    }, getMemoOptions(table.options, debug, 'getCenterHeaderGroups'));\r\n    table.getLeftHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\r\n      var _left$map$filter2;\r\n      const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\r\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\r\n    }, getMemoOptions(table.options, debug, 'getLeftHeaderGroups'));\r\n    table.getRightHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\r\n      var _right$map$filter2;\r\n      const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\r\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\r\n    }, getMemoOptions(table.options, debug, 'getRightHeaderGroups'));\r\n\r\n    // Footer Groups\r\n\r\n    table.getFooterGroups = memo(() => [table.getHeaderGroups()], headerGroups => {\r\n      return [...headerGroups].reverse();\r\n    }, getMemoOptions(table.options, debug, 'getFooterGroups'));\r\n    table.getLeftFooterGroups = memo(() => [table.getLeftHeaderGroups()], headerGroups => {\r\n      return [...headerGroups].reverse();\r\n    }, getMemoOptions(table.options, debug, 'getLeftFooterGroups'));\r\n    table.getCenterFooterGroups = memo(() => [table.getCenterHeaderGroups()], headerGroups => {\r\n      return [...headerGroups].reverse();\r\n    }, getMemoOptions(table.options, debug, 'getCenterFooterGroups'));\r\n    table.getRightFooterGroups = memo(() => [table.getRightHeaderGroups()], headerGroups => {\r\n      return [...headerGroups].reverse();\r\n    }, getMemoOptions(table.options, debug, 'getRightFooterGroups'));\r\n\r\n    // Flat Headers\r\n\r\n    table.getFlatHeaders = memo(() => [table.getHeaderGroups()], headerGroups => {\r\n      return headerGroups.map(headerGroup => {\r\n        return headerGroup.headers;\r\n      }).flat();\r\n    }, getMemoOptions(table.options, debug, 'getFlatHeaders'));\r\n    table.getLeftFlatHeaders = memo(() => [table.getLeftHeaderGroups()], left => {\r\n      return left.map(headerGroup => {\r\n        return headerGroup.headers;\r\n      }).flat();\r\n    }, getMemoOptions(table.options, debug, 'getLeftFlatHeaders'));\r\n    table.getCenterFlatHeaders = memo(() => [table.getCenterHeaderGroups()], left => {\r\n      return left.map(headerGroup => {\r\n        return headerGroup.headers;\r\n      }).flat();\r\n    }, getMemoOptions(table.options, debug, 'getCenterFlatHeaders'));\r\n    table.getRightFlatHeaders = memo(() => [table.getRightHeaderGroups()], left => {\r\n      return left.map(headerGroup => {\r\n        return headerGroup.headers;\r\n      }).flat();\r\n    }, getMemoOptions(table.options, debug, 'getRightFlatHeaders'));\r\n\r\n    // Leaf Headers\r\n\r\n    table.getCenterLeafHeaders = memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\r\n      return flatHeaders.filter(header => {\r\n        var _header$subHeaders;\r\n        return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\r\n      });\r\n    }, getMemoOptions(table.options, debug, 'getCenterLeafHeaders'));\r\n    table.getLeftLeafHeaders = memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\r\n      return flatHeaders.filter(header => {\r\n        var _header$subHeaders2;\r\n        return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\r\n      });\r\n    }, getMemoOptions(table.options, debug, 'getLeftLeafHeaders'));\r\n    table.getRightLeafHeaders = memo(() => [table.getRightFlatHeaders()], flatHeaders => {\r\n      return flatHeaders.filter(header => {\r\n        var _header$subHeaders3;\r\n        return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\r\n      });\r\n    }, getMemoOptions(table.options, debug, 'getRightLeafHeaders'));\r\n    table.getLeafHeaders = memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\r\n      var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\r\n      return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\r\n        return header.getLeafHeaders();\r\n      }).flat();\r\n    }, getMemoOptions(table.options, debug, 'getLeafHeaders'));\r\n  }\r\n};\r\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\r\n  var _headerGroups$0$heade, _headerGroups$;\r\n  // Find the max depth of the columns:\r\n  // build the leaf column row\r\n  // build each buffer row going up\r\n  //    placeholder for non-existent level\r\n  //    real column for existing level\r\n\r\n  let maxDepth = 0;\r\n  const findMaxDepth = function (columns, depth) {\r\n    if (depth === void 0) {\r\n      depth = 1;\r\n    }\r\n    maxDepth = Math.max(maxDepth, depth);\r\n    columns.filter(column => column.getIsVisible()).forEach(column => {\r\n      var _column$columns;\r\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\r\n        findMaxDepth(column.columns, depth + 1);\r\n      }\r\n    }, 0);\r\n  };\r\n  findMaxDepth(allColumns);\r\n  let headerGroups = [];\r\n  const createHeaderGroup = (headersToGroup, depth) => {\r\n    // The header group we are creating\r\n    const headerGroup = {\r\n      depth,\r\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\r\n      headers: []\r\n    };\r\n\r\n    // The parent columns we're going to scan next\r\n    const pendingParentHeaders = [];\r\n\r\n    // Scan each column for parents\r\n    headersToGroup.forEach(headerToGroup => {\r\n      // What is the latest (last) parent column?\r\n\r\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\r\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\r\n      let column;\r\n      let isPlaceholder = false;\r\n      if (isLeafHeader && headerToGroup.column.parent) {\r\n        // The parent header is new\r\n        column = headerToGroup.column.parent;\r\n      } else {\r\n        // The parent header is repeated\r\n        column = headerToGroup.column;\r\n        isPlaceholder = true;\r\n      }\r\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\r\n        // This column is repeated. Add it as a sub header to the next batch\r\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\r\n      } else {\r\n        // This is a new header. Let's create it\r\n        const header = createHeader(table, column, {\r\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\r\n          isPlaceholder,\r\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\r\n          depth,\r\n          index: pendingParentHeaders.length\r\n        });\r\n\r\n        // Add the headerToGroup as a subHeader of the new header\r\n        header.subHeaders.push(headerToGroup);\r\n        // Add the new header to the pendingParentHeaders to get grouped\r\n        // in the next batch\r\n        pendingParentHeaders.push(header);\r\n      }\r\n      headerGroup.headers.push(headerToGroup);\r\n      headerToGroup.headerGroup = headerGroup;\r\n    });\r\n    headerGroups.push(headerGroup);\r\n    if (depth > 0) {\r\n      createHeaderGroup(pendingParentHeaders, depth - 1);\r\n    }\r\n  };\r\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\r\n    depth: maxDepth,\r\n    index\r\n  }));\r\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\r\n  headerGroups.reverse();\r\n\r\n  // headerGroups = headerGroups.filter(headerGroup => {\r\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\r\n  // })\r\n\r\n  const recurseHeadersForSpans = headers => {\r\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\r\n    return filteredHeaders.map(header => {\r\n      let colSpan = 0;\r\n      let rowSpan = 0;\r\n      let childRowSpans = [0];\r\n      if (header.subHeaders && header.subHeaders.length) {\r\n        childRowSpans = [];\r\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\r\n          let {\r\n            colSpan: childColSpan,\r\n            rowSpan: childRowSpan\r\n          } = _ref;\r\n          colSpan += childColSpan;\r\n          childRowSpans.push(childRowSpan);\r\n        });\r\n      } else {\r\n        colSpan = 1;\r\n      }\r\n      const minChildRowSpan = Math.min(...childRowSpans);\r\n      rowSpan = rowSpan + minChildRowSpan;\r\n      header.colSpan = colSpan;\r\n      header.rowSpan = rowSpan;\r\n      return {\r\n        colSpan,\r\n        rowSpan\r\n      };\r\n    });\r\n  };\r\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\r\n  return headerGroups;\r\n}\r\n\r\nconst createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {\r\n  let row = {\r\n    id,\r\n    index: rowIndex,\r\n    original,\r\n    depth,\r\n    parentId,\r\n    _valuesCache: {},\r\n    _uniqueValuesCache: {},\r\n    getValue: columnId => {\r\n      if (row._valuesCache.hasOwnProperty(columnId)) {\r\n        return row._valuesCache[columnId];\r\n      }\r\n      const column = table.getColumn(columnId);\r\n      if (!(column != null && column.accessorFn)) {\r\n        return undefined;\r\n      }\r\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\r\n      return row._valuesCache[columnId];\r\n    },\r\n    getUniqueValues: columnId => {\r\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\r\n        return row._uniqueValuesCache[columnId];\r\n      }\r\n      const column = table.getColumn(columnId);\r\n      if (!(column != null && column.accessorFn)) {\r\n        return undefined;\r\n      }\r\n      if (!column.columnDef.getUniqueValues) {\r\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\r\n        return row._uniqueValuesCache[columnId];\r\n      }\r\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\r\n      return row._uniqueValuesCache[columnId];\r\n    },\r\n    renderValue: columnId => {\r\n      var _row$getValue;\r\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\r\n    },\r\n    subRows: subRows != null ? subRows : [],\r\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\r\n    getParentRow: () => row.parentId ? table.getRow(row.parentId, true) : undefined,\r\n    getParentRows: () => {\r\n      let parentRows = [];\r\n      let currentRow = row;\r\n      while (true) {\r\n        const parentRow = currentRow.getParentRow();\r\n        if (!parentRow) break;\r\n        parentRows.push(parentRow);\r\n        currentRow = parentRow;\r\n      }\r\n      return parentRows.reverse();\r\n    },\r\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\r\n      return leafColumns.map(column => {\r\n        return createCell(table, row, column, column.id);\r\n      });\r\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCells')),\r\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\r\n      return allCells.reduce((acc, cell) => {\r\n        acc[cell.column.id] = cell;\r\n        return acc;\r\n      }, {});\r\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCellsByColumnId'))\r\n  };\r\n  for (let i = 0; i < table._features.length; i++) {\r\n    const feature = table._features[i];\r\n    feature == null || feature.createRow == null || feature.createRow(row, table);\r\n  }\r\n  return row;\r\n};\r\n\r\n//\r\n\r\nconst ColumnFaceting = {\r\n  createColumn: (column, table) => {\r\n    column._getFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id);\r\n    column.getFacetedRowModel = () => {\r\n      if (!column._getFacetedRowModel) {\r\n        return table.getPreFilteredRowModel();\r\n      }\r\n      return column._getFacetedRowModel();\r\n    };\r\n    column._getFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id);\r\n    column.getFacetedUniqueValues = () => {\r\n      if (!column._getFacetedUniqueValues) {\r\n        return new Map();\r\n      }\r\n      return column._getFacetedUniqueValues();\r\n    };\r\n    column._getFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id);\r\n    column.getFacetedMinMaxValues = () => {\r\n      if (!column._getFacetedMinMaxValues) {\r\n        return undefined;\r\n      }\r\n      return column._getFacetedMinMaxValues();\r\n    };\r\n  }\r\n};\r\n\r\nconst includesString = (row, columnId, filterValue) => {\r\n  var _row$getValue;\r\n  const search = filterValue.toLowerCase();\r\n  return Boolean((_row$getValue = row.getValue(columnId)) == null || (_row$getValue = _row$getValue.toString()) == null || (_row$getValue = _row$getValue.toLowerCase()) == null ? void 0 : _row$getValue.includes(search));\r\n};\r\nincludesString.autoRemove = val => testFalsey(val);\r\nconst includesStringSensitive = (row, columnId, filterValue) => {\r\n  var _row$getValue2;\r\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null || (_row$getValue2 = _row$getValue2.toString()) == null ? void 0 : _row$getValue2.includes(filterValue));\r\n};\r\nincludesStringSensitive.autoRemove = val => testFalsey(val);\r\nconst equalsString = (row, columnId, filterValue) => {\r\n  var _row$getValue3;\r\n  return ((_row$getValue3 = row.getValue(columnId)) == null || (_row$getValue3 = _row$getValue3.toString()) == null ? void 0 : _row$getValue3.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());\r\n};\r\nequalsString.autoRemove = val => testFalsey(val);\r\nconst arrIncludes = (row, columnId, filterValue) => {\r\n  var _row$getValue4;\r\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\r\n};\r\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\r\nconst arrIncludesAll = (row, columnId, filterValue) => {\r\n  return !filterValue.some(val => {\r\n    var _row$getValue5;\r\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\r\n  });\r\n};\r\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\r\nconst arrIncludesSome = (row, columnId, filterValue) => {\r\n  return filterValue.some(val => {\r\n    var _row$getValue6;\r\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\r\n  });\r\n};\r\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\r\nconst equals = (row, columnId, filterValue) => {\r\n  return row.getValue(columnId) === filterValue;\r\n};\r\nequals.autoRemove = val => testFalsey(val);\r\nconst weakEquals = (row, columnId, filterValue) => {\r\n  return row.getValue(columnId) == filterValue;\r\n};\r\nweakEquals.autoRemove = val => testFalsey(val);\r\nconst inNumberRange = (row, columnId, filterValue) => {\r\n  let [min, max] = filterValue;\r\n  const rowValue = row.getValue(columnId);\r\n  return rowValue >= min && rowValue <= max;\r\n};\r\ninNumberRange.resolveFilterValue = val => {\r\n  let [unsafeMin, unsafeMax] = val;\r\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\r\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\r\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\r\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\r\n  if (min > max) {\r\n    const temp = min;\r\n    min = max;\r\n    max = temp;\r\n  }\r\n  return [min, max];\r\n};\r\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\r\n\r\n// Export\r\n\r\nconst filterFns = {\r\n  includesString,\r\n  includesStringSensitive,\r\n  equalsString,\r\n  arrIncludes,\r\n  arrIncludesAll,\r\n  arrIncludesSome,\r\n  equals,\r\n  weakEquals,\r\n  inNumberRange\r\n};\r\n// Utils\r\n\r\nfunction testFalsey(val) {\r\n  return val === undefined || val === null || val === '';\r\n}\r\n\r\n//\r\n\r\nconst ColumnFiltering = {\r\n  getDefaultColumnDef: () => {\r\n    return {\r\n      filterFn: 'auto'\r\n    };\r\n  },\r\n  getInitialState: state => {\r\n    return {\r\n      columnFilters: [],\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\r\n      filterFromLeafRows: false,\r\n      maxLeafRowFilterDepth: 100\r\n    };\r\n  },\r\n  createColumn: (column, table) => {\r\n    column.getAutoFilterFn = () => {\r\n      const firstRow = table.getCoreRowModel().flatRows[0];\r\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\r\n      if (typeof value === 'string') {\r\n        return filterFns.includesString;\r\n      }\r\n      if (typeof value === 'number') {\r\n        return filterFns.inNumberRange;\r\n      }\r\n      if (typeof value === 'boolean') {\r\n        return filterFns.equals;\r\n      }\r\n      if (value !== null && typeof value === 'object') {\r\n        return filterFns.equals;\r\n      }\r\n      if (Array.isArray(value)) {\r\n        return filterFns.arrIncludes;\r\n      }\r\n      return filterFns.weakEquals;\r\n    };\r\n    column.getFilterFn = () => {\r\n      var _table$options$filter, _table$options$filter2;\r\n      return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : // @ts-ignore\r\n      (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\r\n    };\r\n    column.getCanFilter = () => {\r\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\r\n      return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\r\n    };\r\n    column.getIsFiltered = () => column.getFilterIndex() > -1;\r\n    column.getFilterValue = () => {\r\n      var _table$getState$colum;\r\n      return (_table$getState$colum = table.getState().columnFilters) == null || (_table$getState$colum = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum.value;\r\n    };\r\n    column.getFilterIndex = () => {\r\n      var _table$getState$colum2, _table$getState$colum3;\r\n      return (_table$getState$colum2 = (_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex(d => d.id === column.id)) != null ? _table$getState$colum2 : -1;\r\n    };\r\n    column.setFilterValue = value => {\r\n      table.setColumnFilters(old => {\r\n        const filterFn = column.getFilterFn();\r\n        const previousFilter = old == null ? void 0 : old.find(d => d.id === column.id);\r\n        const newFilter = functionalUpdate(value, previousFilter ? previousFilter.value : undefined);\r\n\r\n        //\r\n        if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\r\n          var _old$filter;\r\n          return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\r\n        }\r\n        const newFilterObj = {\r\n          id: column.id,\r\n          value: newFilter\r\n        };\r\n        if (previousFilter) {\r\n          var _old$map;\r\n          return (_old$map = old == null ? void 0 : old.map(d => {\r\n            if (d.id === column.id) {\r\n              return newFilterObj;\r\n            }\r\n            return d;\r\n          })) != null ? _old$map : [];\r\n        }\r\n        if (old != null && old.length) {\r\n          return [...old, newFilterObj];\r\n        }\r\n        return [newFilterObj];\r\n      });\r\n    };\r\n  },\r\n  createRow: (row, _table) => {\r\n    row.columnFilters = {};\r\n    row.columnFiltersMeta = {};\r\n  },\r\n  createTable: table => {\r\n    table.setColumnFilters = updater => {\r\n      const leafColumns = table.getAllLeafColumns();\r\n      const updateFn = old => {\r\n        var _functionalUpdate;\r\n        return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\r\n          const column = leafColumns.find(d => d.id === filter.id);\r\n          if (column) {\r\n            const filterFn = column.getFilterFn();\r\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\r\n              return false;\r\n            }\r\n          }\r\n          return true;\r\n        });\r\n      };\r\n      table.options.onColumnFiltersChange == null || table.options.onColumnFiltersChange(updateFn);\r\n    };\r\n    table.resetColumnFilters = defaultState => {\r\n      var _table$initialState$c, _table$initialState;\r\n      table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\r\n    };\r\n    table.getPreFilteredRowModel = () => table.getCoreRowModel();\r\n    table.getFilteredRowModel = () => {\r\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\r\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table);\r\n      }\r\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\r\n        return table.getPreFilteredRowModel();\r\n      }\r\n      return table._getFilteredRowModel();\r\n    };\r\n  }\r\n};\r\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\r\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\r\n}\r\n\r\nconst sum = (columnId, _leafRows, childRows) => {\r\n  // It's faster to just add the aggregations together instead of\r\n  // process leaf nodes individually\r\n  return childRows.reduce((sum, next) => {\r\n    const nextValue = next.getValue(columnId);\r\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\r\n  }, 0);\r\n};\r\nconst min = (columnId, _leafRows, childRows) => {\r\n  let min;\r\n  childRows.forEach(row => {\r\n    const value = row.getValue(columnId);\r\n    if (value != null && (min > value || min === undefined && value >= value)) {\r\n      min = value;\r\n    }\r\n  });\r\n  return min;\r\n};\r\nconst max = (columnId, _leafRows, childRows) => {\r\n  let max;\r\n  childRows.forEach(row => {\r\n    const value = row.getValue(columnId);\r\n    if (value != null && (max < value || max === undefined && value >= value)) {\r\n      max = value;\r\n    }\r\n  });\r\n  return max;\r\n};\r\nconst extent = (columnId, _leafRows, childRows) => {\r\n  let min;\r\n  let max;\r\n  childRows.forEach(row => {\r\n    const value = row.getValue(columnId);\r\n    if (value != null) {\r\n      if (min === undefined) {\r\n        if (value >= value) min = max = value;\r\n      } else {\r\n        if (min > value) min = value;\r\n        if (max < value) max = value;\r\n      }\r\n    }\r\n  });\r\n  return [min, max];\r\n};\r\nconst mean = (columnId, leafRows) => {\r\n  let count = 0;\r\n  let sum = 0;\r\n  leafRows.forEach(row => {\r\n    let value = row.getValue(columnId);\r\n    if (value != null && (value = +value) >= value) {\r\n      ++count, sum += value;\r\n    }\r\n  });\r\n  if (count) return sum / count;\r\n  return;\r\n};\r\nconst median = (columnId, leafRows) => {\r\n  if (!leafRows.length) {\r\n    return;\r\n  }\r\n  const values = leafRows.map(row => row.getValue(columnId));\r\n  if (!isNumberArray(values)) {\r\n    return;\r\n  }\r\n  if (values.length === 1) {\r\n    return values[0];\r\n  }\r\n  const mid = Math.floor(values.length / 2);\r\n  const nums = values.sort((a, b) => a - b);\r\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\r\n};\r\nconst unique = (columnId, leafRows) => {\r\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\r\n};\r\nconst uniqueCount = (columnId, leafRows) => {\r\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\r\n};\r\nconst count = (_columnId, leafRows) => {\r\n  return leafRows.length;\r\n};\r\nconst aggregationFns = {\r\n  sum,\r\n  min,\r\n  max,\r\n  extent,\r\n  mean,\r\n  median,\r\n  unique,\r\n  uniqueCount,\r\n  count\r\n};\r\n\r\n//\r\n\r\nconst ColumnGrouping = {\r\n  getDefaultColumnDef: () => {\r\n    return {\r\n      aggregatedCell: props => {\r\n        var _toString, _props$getValue;\r\n        return (_toString = (_props$getValue = props.getValue()) == null || _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\r\n      },\r\n      aggregationFn: 'auto'\r\n    };\r\n  },\r\n  getInitialState: state => {\r\n    return {\r\n      grouping: [],\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onGroupingChange: makeStateUpdater('grouping', table),\r\n      groupedColumnMode: 'reorder'\r\n    };\r\n  },\r\n  createColumn: (column, table) => {\r\n    column.toggleGrouping = () => {\r\n      table.setGrouping(old => {\r\n        // Find any existing grouping for this column\r\n        if (old != null && old.includes(column.id)) {\r\n          return old.filter(d => d !== column.id);\r\n        }\r\n        return [...(old != null ? old : []), column.id];\r\n      });\r\n    };\r\n    column.getCanGroup = () => {\r\n      var _column$columnDef$ena, _table$options$enable;\r\n      return ((_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGrouping) != null ? _table$options$enable : true) && (!!column.accessorFn || !!column.columnDef.getGroupingValue);\r\n    };\r\n    column.getIsGrouped = () => {\r\n      var _table$getState$group;\r\n      return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\r\n    };\r\n    column.getGroupedIndex = () => {\r\n      var _table$getState$group2;\r\n      return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\r\n    };\r\n    column.getToggleGroupingHandler = () => {\r\n      const canGroup = column.getCanGroup();\r\n      return () => {\r\n        if (!canGroup) return;\r\n        column.toggleGrouping();\r\n      };\r\n    };\r\n    column.getAutoAggregationFn = () => {\r\n      const firstRow = table.getCoreRowModel().flatRows[0];\r\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\r\n      if (typeof value === 'number') {\r\n        return aggregationFns.sum;\r\n      }\r\n      if (Object.prototype.toString.call(value) === '[object Date]') {\r\n        return aggregationFns.extent;\r\n      }\r\n    };\r\n    column.getAggregationFn = () => {\r\n      var _table$options$aggreg, _table$options$aggreg2;\r\n      if (!column) {\r\n        throw new Error();\r\n      }\r\n      return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\r\n    };\r\n  },\r\n  createTable: table => {\r\n    table.setGrouping = updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);\r\n    table.resetGrouping = defaultState => {\r\n      var _table$initialState$g, _table$initialState;\r\n      table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\r\n    };\r\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel();\r\n    table.getGroupedRowModel = () => {\r\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\r\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table);\r\n      }\r\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\r\n        return table.getPreGroupedRowModel();\r\n      }\r\n      return table._getGroupedRowModel();\r\n    };\r\n  },\r\n  createRow: (row, table) => {\r\n    row.getIsGrouped = () => !!row.groupingColumnId;\r\n    row.getGroupingValue = columnId => {\r\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\r\n        return row._groupingValuesCache[columnId];\r\n      }\r\n      const column = table.getColumn(columnId);\r\n      if (!(column != null && column.columnDef.getGroupingValue)) {\r\n        return row.getValue(columnId);\r\n      }\r\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);\r\n      return row._groupingValuesCache[columnId];\r\n    };\r\n    row._groupingValuesCache = {};\r\n  },\r\n  createCell: (cell, column, row, table) => {\r\n    cell.getIsGrouped = () => column.getIsGrouped() && column.id === row.groupingColumnId;\r\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped();\r\n    cell.getIsAggregated = () => {\r\n      var _row$subRows;\r\n      return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\r\n    };\r\n  }\r\n};\r\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\r\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\r\n    return leafColumns;\r\n  }\r\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\r\n  if (groupedColumnMode === 'remove') {\r\n    return nonGroupingColumns;\r\n  }\r\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\r\n  return [...groupingColumns, ...nonGroupingColumns];\r\n}\r\n\r\n//\r\n\r\nconst ColumnOrdering = {\r\n  getInitialState: state => {\r\n    return {\r\n      columnOrder: [],\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\r\n    };\r\n  },\r\n  createColumn: (column, table) => {\r\n    column.getIndex = memo(position => [_getVisibleLeafColumns(table, position)], columns => columns.findIndex(d => d.id === column.id), getMemoOptions(table.options, 'debugColumns', 'getIndex'));\r\n    column.getIsFirstColumn = position => {\r\n      var _columns$;\r\n      const columns = _getVisibleLeafColumns(table, position);\r\n      return ((_columns$ = columns[0]) == null ? void 0 : _columns$.id) === column.id;\r\n    };\r\n    column.getIsLastColumn = position => {\r\n      var _columns;\r\n      const columns = _getVisibleLeafColumns(table, position);\r\n      return ((_columns = columns[columns.length - 1]) == null ? void 0 : _columns.id) === column.id;\r\n    };\r\n  },\r\n  createTable: table => {\r\n    table.setColumnOrder = updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);\r\n    table.resetColumnOrder = defaultState => {\r\n      var _table$initialState$c;\r\n      table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\r\n    };\r\n    table._getOrderColumnsFn = memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\r\n      // Sort grouped columns to the start of the column list\r\n      // before the headers are built\r\n      let orderedColumns = [];\r\n\r\n      // If there is no order, return the normal columns\r\n      if (!(columnOrder != null && columnOrder.length)) {\r\n        orderedColumns = columns;\r\n      } else {\r\n        const columnOrderCopy = [...columnOrder];\r\n\r\n        // If there is an order, make a copy of the columns\r\n        const columnsCopy = [...columns];\r\n\r\n        // And make a new ordered array of the columns\r\n\r\n        // Loop over the columns and place them in order into the new array\r\n        while (columnsCopy.length && columnOrderCopy.length) {\r\n          const targetColumnId = columnOrderCopy.shift();\r\n          const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\r\n          if (foundIndex > -1) {\r\n            orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\r\n          }\r\n        }\r\n\r\n        // If there are any columns left, add them to the end\r\n        orderedColumns = [...orderedColumns, ...columnsCopy];\r\n      }\r\n      return orderColumns(orderedColumns, grouping, groupedColumnMode);\r\n    }, getMemoOptions(table.options, 'debugTable', '_getOrderColumnsFn'));\r\n  }\r\n};\r\n\r\n//\r\n\r\nconst getDefaultColumnPinningState = () => ({\r\n  left: [],\r\n  right: []\r\n});\r\nconst ColumnPinning = {\r\n  getInitialState: state => {\r\n    return {\r\n      columnPinning: getDefaultColumnPinningState(),\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\r\n    };\r\n  },\r\n  createColumn: (column, table) => {\r\n    column.pin = position => {\r\n      const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\r\n      table.setColumnPinning(old => {\r\n        var _old$left3, _old$right3;\r\n        if (position === 'right') {\r\n          var _old$left, _old$right;\r\n          return {\r\n            left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\r\n            right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\r\n          };\r\n        }\r\n        if (position === 'left') {\r\n          var _old$left2, _old$right2;\r\n          return {\r\n            left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\r\n            right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\r\n          };\r\n        }\r\n        return {\r\n          left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\r\n          right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\r\n        };\r\n      });\r\n    };\r\n    column.getCanPin = () => {\r\n      const leafColumns = column.getLeafColumns();\r\n      return leafColumns.some(d => {\r\n        var _d$columnDef$enablePi, _ref, _table$options$enable;\r\n        return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_ref = (_table$options$enable = table.options.enableColumnPinning) != null ? _table$options$enable : table.options.enablePinning) != null ? _ref : true);\r\n      });\r\n    };\r\n    column.getIsPinned = () => {\r\n      const leafColumnIds = column.getLeafColumns().map(d => d.id);\r\n      const {\r\n        left,\r\n        right\r\n      } = table.getState().columnPinning;\r\n      const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\r\n      const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\r\n      return isLeft ? 'left' : isRight ? 'right' : false;\r\n    };\r\n    column.getPinnedIndex = () => {\r\n      var _table$getState$colum, _table$getState$colum2;\r\n      const position = column.getIsPinned();\r\n      return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null || (_table$getState$colum2 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum2.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\r\n    };\r\n  },\r\n  createRow: (row, table) => {\r\n    row.getCenterVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\r\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\r\n      return allCells.filter(d => !leftAndRight.includes(d.column.id));\r\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterVisibleCells'));\r\n    row.getLeftVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left], (allCells, left) => {\r\n      const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\r\n        ...d,\r\n        position: 'left'\r\n      }));\r\n      return cells;\r\n    }, getMemoOptions(table.options, 'debugRows', 'getLeftVisibleCells'));\r\n    row.getRightVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\r\n      const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\r\n        ...d,\r\n        position: 'right'\r\n      }));\r\n      return cells;\r\n    }, getMemoOptions(table.options, 'debugRows', 'getRightVisibleCells'));\r\n  },\r\n  createTable: table => {\r\n    table.setColumnPinning = updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);\r\n    table.resetColumnPinning = defaultState => {\r\n      var _table$initialState$c, _table$initialState;\r\n      return table.setColumnPinning(defaultState ? getDefaultColumnPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultColumnPinningState());\r\n    };\r\n    table.getIsSomeColumnsPinned = position => {\r\n      var _pinningState$positio;\r\n      const pinningState = table.getState().columnPinning;\r\n      if (!position) {\r\n        var _pinningState$left, _pinningState$right;\r\n        return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\r\n      }\r\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\r\n    };\r\n    table.getLeftLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\r\n      return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\r\n    }, getMemoOptions(table.options, 'debugColumns', 'getLeftLeafColumns'));\r\n    table.getRightLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\r\n      return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\r\n    }, getMemoOptions(table.options, 'debugColumns', 'getRightLeafColumns'));\r\n    table.getCenterLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\r\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\r\n      return allColumns.filter(d => !leftAndRight.includes(d.id));\r\n    }, getMemoOptions(table.options, 'debugColumns', 'getCenterLeafColumns'));\r\n  }\r\n};\r\n\r\n//\r\n\r\n//\r\n\r\nconst defaultColumnSizing = {\r\n  size: 150,\r\n  minSize: 20,\r\n  maxSize: Number.MAX_SAFE_INTEGER\r\n};\r\nconst getDefaultColumnSizingInfoState = () => ({\r\n  startOffset: null,\r\n  startSize: null,\r\n  deltaOffset: null,\r\n  deltaPercentage: null,\r\n  isResizingColumn: false,\r\n  columnSizingStart: []\r\n});\r\nconst ColumnSizing = {\r\n  getDefaultColumnDef: () => {\r\n    return defaultColumnSizing;\r\n  },\r\n  getInitialState: state => {\r\n    return {\r\n      columnSizing: {},\r\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      columnResizeMode: 'onEnd',\r\n      columnResizeDirection: 'ltr',\r\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\r\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\r\n    };\r\n  },\r\n  createColumn: (column, table) => {\r\n    column.getSize = () => {\r\n      var _column$columnDef$min, _ref, _column$columnDef$max;\r\n      const columnSize = table.getState().columnSizing[column.id];\r\n      return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\r\n    };\r\n    column.getStart = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(0, column.getIndex(position)).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getStart'));\r\n    column.getAfter = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(column.getIndex(position) + 1).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getAfter'));\r\n    column.resetSize = () => {\r\n      table.setColumnSizing(_ref2 => {\r\n        let {\r\n          [column.id]: _,\r\n          ...rest\r\n        } = _ref2;\r\n        return rest;\r\n      });\r\n    };\r\n    column.getCanResize = () => {\r\n      var _column$columnDef$ena, _table$options$enable;\r\n      return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\r\n    };\r\n    column.getIsResizing = () => {\r\n      return table.getState().columnSizingInfo.isResizingColumn === column.id;\r\n    };\r\n  },\r\n  createHeader: (header, table) => {\r\n    header.getSize = () => {\r\n      let sum = 0;\r\n      const recurse = header => {\r\n        if (header.subHeaders.length) {\r\n          header.subHeaders.forEach(recurse);\r\n        } else {\r\n          var _header$column$getSiz;\r\n          sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\r\n        }\r\n      };\r\n      recurse(header);\r\n      return sum;\r\n    };\r\n    header.getStart = () => {\r\n      if (header.index > 0) {\r\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\r\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\r\n      }\r\n      return 0;\r\n    };\r\n    header.getResizeHandler = _contextDocument => {\r\n      const column = table.getColumn(header.column.id);\r\n      const canResize = column == null ? void 0 : column.getCanResize();\r\n      return e => {\r\n        if (!column || !canResize) {\r\n          return;\r\n        }\r\n        e.persist == null || e.persist();\r\n        if (isTouchStartEvent(e)) {\r\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\r\n          if (e.touches && e.touches.length > 1) {\r\n            return;\r\n          }\r\n        }\r\n        const startSize = header.getSize();\r\n        const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\r\n        const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\r\n        const newColumnSizing = {};\r\n        const updateOffset = (eventType, clientXPos) => {\r\n          if (typeof clientXPos !== 'number') {\r\n            return;\r\n          }\r\n          table.setColumnSizingInfo(old => {\r\n            var _old$startOffset, _old$startSize;\r\n            const deltaDirection = table.options.columnResizeDirection === 'rtl' ? -1 : 1;\r\n            const deltaOffset = (clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0)) * deltaDirection;\r\n            const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\r\n            old.columnSizingStart.forEach(_ref3 => {\r\n              let [columnId, headerSize] = _ref3;\r\n              newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\r\n            });\r\n            return {\r\n              ...old,\r\n              deltaOffset,\r\n              deltaPercentage\r\n            };\r\n          });\r\n          if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\r\n            table.setColumnSizing(old => ({\r\n              ...old,\r\n              ...newColumnSizing\r\n            }));\r\n          }\r\n        };\r\n        const onMove = clientXPos => updateOffset('move', clientXPos);\r\n        const onEnd = clientXPos => {\r\n          updateOffset('end', clientXPos);\r\n          table.setColumnSizingInfo(old => ({\r\n            ...old,\r\n            isResizingColumn: false,\r\n            startOffset: null,\r\n            startSize: null,\r\n            deltaOffset: null,\r\n            deltaPercentage: null,\r\n            columnSizingStart: []\r\n          }));\r\n        };\r\n        const contextDocument = _contextDocument || typeof document !== 'undefined' ? document : null;\r\n        const mouseEvents = {\r\n          moveHandler: e => onMove(e.clientX),\r\n          upHandler: e => {\r\n            contextDocument == null || contextDocument.removeEventListener('mousemove', mouseEvents.moveHandler);\r\n            contextDocument == null || contextDocument.removeEventListener('mouseup', mouseEvents.upHandler);\r\n            onEnd(e.clientX);\r\n          }\r\n        };\r\n        const touchEvents = {\r\n          moveHandler: e => {\r\n            if (e.cancelable) {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n            }\r\n            onMove(e.touches[0].clientX);\r\n            return false;\r\n          },\r\n          upHandler: e => {\r\n            var _e$touches$;\r\n            contextDocument == null || contextDocument.removeEventListener('touchmove', touchEvents.moveHandler);\r\n            contextDocument == null || contextDocument.removeEventListener('touchend', touchEvents.upHandler);\r\n            if (e.cancelable) {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n            }\r\n            onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\r\n          }\r\n        };\r\n        const passiveIfSupported = passiveEventSupported() ? {\r\n          passive: false\r\n        } : false;\r\n        if (isTouchStartEvent(e)) {\r\n          contextDocument == null || contextDocument.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\r\n          contextDocument == null || contextDocument.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\r\n        } else {\r\n          contextDocument == null || contextDocument.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\r\n          contextDocument == null || contextDocument.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\r\n        }\r\n        table.setColumnSizingInfo(old => ({\r\n          ...old,\r\n          startOffset: clientX,\r\n          startSize,\r\n          deltaOffset: 0,\r\n          deltaPercentage: 0,\r\n          columnSizingStart,\r\n          isResizingColumn: column.id\r\n        }));\r\n      };\r\n    };\r\n  },\r\n  createTable: table => {\r\n    table.setColumnSizing = updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);\r\n    table.setColumnSizingInfo = updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);\r\n    table.resetColumnSizing = defaultState => {\r\n      var _table$initialState$c;\r\n      table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\r\n    };\r\n    table.resetHeaderSizeInfo = defaultState => {\r\n      var _table$initialState$c2;\r\n      table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\r\n    };\r\n    table.getTotalSize = () => {\r\n      var _table$getHeaderGroup, _table$getHeaderGroup2;\r\n      return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\r\n        return sum + header.getSize();\r\n      }, 0)) != null ? _table$getHeaderGroup : 0;\r\n    };\r\n    table.getLeftTotalSize = () => {\r\n      var _table$getLeftHeaderG, _table$getLeftHeaderG2;\r\n      return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\r\n        return sum + header.getSize();\r\n      }, 0)) != null ? _table$getLeftHeaderG : 0;\r\n    };\r\n    table.getCenterTotalSize = () => {\r\n      var _table$getCenterHeade, _table$getCenterHeade2;\r\n      return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\r\n        return sum + header.getSize();\r\n      }, 0)) != null ? _table$getCenterHeade : 0;\r\n    };\r\n    table.getRightTotalSize = () => {\r\n      var _table$getRightHeader, _table$getRightHeader2;\r\n      return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\r\n        return sum + header.getSize();\r\n      }, 0)) != null ? _table$getRightHeader : 0;\r\n    };\r\n  }\r\n};\r\nlet passiveSupported = null;\r\nfunction passiveEventSupported() {\r\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\r\n  let supported = false;\r\n  try {\r\n    const options = {\r\n      get passive() {\r\n        supported = true;\r\n        return false;\r\n      }\r\n    };\r\n    const noop = () => {};\r\n    window.addEventListener('test', noop, options);\r\n    window.removeEventListener('test', noop);\r\n  } catch (err) {\r\n    supported = false;\r\n  }\r\n  passiveSupported = supported;\r\n  return passiveSupported;\r\n}\r\nfunction isTouchStartEvent(e) {\r\n  return e.type === 'touchstart';\r\n}\r\n\r\n//\r\n\r\nconst ColumnVisibility = {\r\n  getInitialState: state => {\r\n    return {\r\n      columnVisibility: {},\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\r\n    };\r\n  },\r\n  createColumn: (column, table) => {\r\n    column.toggleVisibility = value => {\r\n      if (column.getCanHide()) {\r\n        table.setColumnVisibility(old => ({\r\n          ...old,\r\n          [column.id]: value != null ? value : !column.getIsVisible()\r\n        }));\r\n      }\r\n    };\r\n    column.getIsVisible = () => {\r\n      var _ref, _table$getState$colum;\r\n      const childColumns = column.columns;\r\n      return (_ref = childColumns.length ? childColumns.some(c => c.getIsVisible()) : (_table$getState$colum = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum[column.id]) != null ? _ref : true;\r\n    };\r\n    column.getCanHide = () => {\r\n      var _column$columnDef$ena, _table$options$enable;\r\n      return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\r\n    };\r\n    column.getToggleVisibilityHandler = () => {\r\n      return e => {\r\n        column.toggleVisibility == null || column.toggleVisibility(e.target.checked);\r\n      };\r\n    };\r\n  },\r\n  createRow: (row, table) => {\r\n    row._getAllVisibleCells = memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\r\n      return cells.filter(cell => cell.column.getIsVisible());\r\n    }, getMemoOptions(table.options, 'debugRows', '_getAllVisibleCells'));\r\n    row.getVisibleCells = memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], getMemoOptions(table.options, 'debugRows', 'getVisibleCells'));\r\n  },\r\n  createTable: table => {\r\n    const makeVisibleColumnsMethod = (key, getColumns) => {\r\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\r\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\r\n      }, getMemoOptions(table.options, 'debugColumns', key));\r\n    };\r\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns());\r\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns());\r\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns());\r\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns());\r\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns());\r\n    table.setColumnVisibility = updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);\r\n    table.resetColumnVisibility = defaultState => {\r\n      var _table$initialState$c;\r\n      table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\r\n    };\r\n    table.toggleAllColumnsVisible = value => {\r\n      var _value;\r\n      value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\r\n      table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\r\n        ...obj,\r\n        [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\r\n      }), {}));\r\n    };\r\n    table.getIsAllColumnsVisible = () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible()));\r\n    table.getIsSomeColumnsVisible = () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible());\r\n    table.getToggleAllColumnsVisibilityHandler = () => {\r\n      return e => {\r\n        var _target;\r\n        table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\r\n      };\r\n    };\r\n  }\r\n};\r\nfunction _getVisibleLeafColumns(table, position) {\r\n  return !position ? table.getVisibleLeafColumns() : position === 'center' ? table.getCenterVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\r\n}\r\n\r\n//\r\n\r\nconst GlobalFaceting = {\r\n  createTable: table => {\r\n    table._getGlobalFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__');\r\n    table.getGlobalFacetedRowModel = () => {\r\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\r\n        return table.getPreFilteredRowModel();\r\n      }\r\n      return table._getGlobalFacetedRowModel();\r\n    };\r\n    table._getGlobalFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__');\r\n    table.getGlobalFacetedUniqueValues = () => {\r\n      if (!table._getGlobalFacetedUniqueValues) {\r\n        return new Map();\r\n      }\r\n      return table._getGlobalFacetedUniqueValues();\r\n    };\r\n    table._getGlobalFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__');\r\n    table.getGlobalFacetedMinMaxValues = () => {\r\n      if (!table._getGlobalFacetedMinMaxValues) {\r\n        return;\r\n      }\r\n      return table._getGlobalFacetedMinMaxValues();\r\n    };\r\n  }\r\n};\r\n\r\n//\r\n\r\nconst GlobalFiltering = {\r\n  getInitialState: state => {\r\n    return {\r\n      globalFilter: undefined,\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\r\n      globalFilterFn: 'auto',\r\n      getColumnCanGlobalFilter: column => {\r\n        var _table$getCoreRowMode;\r\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null || (_table$getCoreRowMode = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode.getValue();\r\n        return typeof value === 'string' || typeof value === 'number';\r\n      }\r\n    };\r\n  },\r\n  createColumn: (column, table) => {\r\n    column.getCanGlobalFilter = () => {\r\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2, _table$options$getCol;\r\n      return ((_column$columnDef$ena = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGlobalFilter) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\r\n    };\r\n  },\r\n  createTable: table => {\r\n    table.getGlobalAutoFilterFn = () => {\r\n      return filterFns.includesString;\r\n    };\r\n    table.getGlobalFilterFn = () => {\r\n      var _table$options$filter, _table$options$filter2;\r\n      const {\r\n        globalFilterFn: globalFilterFn\r\n      } = table.options;\r\n      return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[globalFilterFn]) != null ? _table$options$filter : filterFns[globalFilterFn];\r\n    };\r\n    table.setGlobalFilter = updater => {\r\n      table.options.onGlobalFilterChange == null || table.options.onGlobalFilterChange(updater);\r\n    };\r\n    table.resetGlobalFilter = defaultState => {\r\n      table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\r\n    };\r\n  }\r\n};\r\n\r\n//\r\n\r\nconst RowExpanding = {\r\n  getInitialState: state => {\r\n    return {\r\n      expanded: {},\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onExpandedChange: makeStateUpdater('expanded', table),\r\n      paginateExpandedRows: true\r\n    };\r\n  },\r\n  createTable: table => {\r\n    let registered = false;\r\n    let queued = false;\r\n    table._autoResetExpanded = () => {\r\n      var _ref, _table$options$autoRe;\r\n      if (!registered) {\r\n        table._queue(() => {\r\n          registered = true;\r\n        });\r\n        return;\r\n      }\r\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\r\n        if (queued) return;\r\n        queued = true;\r\n        table._queue(() => {\r\n          table.resetExpanded();\r\n          queued = false;\r\n        });\r\n      }\r\n    };\r\n    table.setExpanded = updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);\r\n    table.toggleAllRowsExpanded = expanded => {\r\n      if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\r\n        table.setExpanded(true);\r\n      } else {\r\n        table.setExpanded({});\r\n      }\r\n    };\r\n    table.resetExpanded = defaultState => {\r\n      var _table$initialState$e, _table$initialState;\r\n      table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\r\n    };\r\n    table.getCanSomeRowsExpand = () => {\r\n      return table.getPrePaginationRowModel().flatRows.some(row => row.getCanExpand());\r\n    };\r\n    table.getToggleAllRowsExpandedHandler = () => {\r\n      return e => {\r\n        e.persist == null || e.persist();\r\n        table.toggleAllRowsExpanded();\r\n      };\r\n    };\r\n    table.getIsSomeRowsExpanded = () => {\r\n      const expanded = table.getState().expanded;\r\n      return expanded === true || Object.values(expanded).some(Boolean);\r\n    };\r\n    table.getIsAllRowsExpanded = () => {\r\n      const expanded = table.getState().expanded;\r\n\r\n      // If expanded is true, save some cycles and return true\r\n      if (typeof expanded === 'boolean') {\r\n        return expanded === true;\r\n      }\r\n      if (!Object.keys(expanded).length) {\r\n        return false;\r\n      }\r\n\r\n      // If any row is not expanded, return false\r\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\r\n        return false;\r\n      }\r\n\r\n      // They must all be expanded :shrug:\r\n      return true;\r\n    };\r\n    table.getExpandedDepth = () => {\r\n      let maxDepth = 0;\r\n      const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\r\n      rowIds.forEach(id => {\r\n        const splitId = id.split('.');\r\n        maxDepth = Math.max(maxDepth, splitId.length);\r\n      });\r\n      return maxDepth;\r\n    };\r\n    table.getPreExpandedRowModel = () => table.getSortedRowModel();\r\n    table.getExpandedRowModel = () => {\r\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\r\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table);\r\n      }\r\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\r\n        return table.getPreExpandedRowModel();\r\n      }\r\n      return table._getExpandedRowModel();\r\n    };\r\n  },\r\n  createRow: (row, table) => {\r\n    row.toggleExpanded = expanded => {\r\n      table.setExpanded(old => {\r\n        var _expanded;\r\n        const exists = old === true ? true : !!(old != null && old[row.id]);\r\n        let oldExpanded = {};\r\n        if (old === true) {\r\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\r\n            oldExpanded[rowId] = true;\r\n          });\r\n        } else {\r\n          oldExpanded = old;\r\n        }\r\n        expanded = (_expanded = expanded) != null ? _expanded : !exists;\r\n        if (!exists && expanded) {\r\n          return {\r\n            ...oldExpanded,\r\n            [row.id]: true\r\n          };\r\n        }\r\n        if (exists && !expanded) {\r\n          const {\r\n            [row.id]: _,\r\n            ...rest\r\n          } = oldExpanded;\r\n          return rest;\r\n        }\r\n        return old;\r\n      });\r\n    };\r\n    row.getIsExpanded = () => {\r\n      var _table$options$getIsR;\r\n      const expanded = table.getState().expanded;\r\n      return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\r\n    };\r\n    row.getCanExpand = () => {\r\n      var _table$options$getRow, _table$options$enable, _row$subRows;\r\n      return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\r\n    };\r\n    row.getIsAllParentsExpanded = () => {\r\n      let isFullyExpanded = true;\r\n      let currentRow = row;\r\n      while (isFullyExpanded && currentRow.parentId) {\r\n        currentRow = table.getRow(currentRow.parentId, true);\r\n        isFullyExpanded = currentRow.getIsExpanded();\r\n      }\r\n      return isFullyExpanded;\r\n    };\r\n    row.getToggleExpandedHandler = () => {\r\n      const canExpand = row.getCanExpand();\r\n      return () => {\r\n        if (!canExpand) return;\r\n        row.toggleExpanded();\r\n      };\r\n    };\r\n  }\r\n};\r\n\r\n//\r\n\r\nconst defaultPageIndex = 0;\r\nconst defaultPageSize = 10;\r\nconst getDefaultPaginationState = () => ({\r\n  pageIndex: defaultPageIndex,\r\n  pageSize: defaultPageSize\r\n});\r\nconst RowPagination = {\r\n  getInitialState: state => {\r\n    return {\r\n      ...state,\r\n      pagination: {\r\n        ...getDefaultPaginationState(),\r\n        ...(state == null ? void 0 : state.pagination)\r\n      }\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onPaginationChange: makeStateUpdater('pagination', table)\r\n    };\r\n  },\r\n  createTable: table => {\r\n    let registered = false;\r\n    let queued = false;\r\n    table._autoResetPageIndex = () => {\r\n      var _ref, _table$options$autoRe;\r\n      if (!registered) {\r\n        table._queue(() => {\r\n          registered = true;\r\n        });\r\n        return;\r\n      }\r\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\r\n        if (queued) return;\r\n        queued = true;\r\n        table._queue(() => {\r\n          table.resetPageIndex();\r\n          queued = false;\r\n        });\r\n      }\r\n    };\r\n    table.setPagination = updater => {\r\n      const safeUpdater = old => {\r\n        let newState = functionalUpdate(updater, old);\r\n        return newState;\r\n      };\r\n      return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\r\n    };\r\n    table.resetPagination = defaultState => {\r\n      var _table$initialState$p;\r\n      table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\r\n    };\r\n    table.setPageIndex = updater => {\r\n      table.setPagination(old => {\r\n        let pageIndex = functionalUpdate(updater, old.pageIndex);\r\n        const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\r\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\r\n        return {\r\n          ...old,\r\n          pageIndex\r\n        };\r\n      });\r\n    };\r\n    table.resetPageIndex = defaultState => {\r\n      var _table$initialState$p2, _table$initialState;\r\n      table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null || (_table$initialState = _table$initialState.pagination) == null ? void 0 : _table$initialState.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\r\n    };\r\n    table.resetPageSize = defaultState => {\r\n      var _table$initialState$p3, _table$initialState2;\r\n      table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p3 = (_table$initialState2 = table.initialState) == null || (_table$initialState2 = _table$initialState2.pagination) == null ? void 0 : _table$initialState2.pageSize) != null ? _table$initialState$p3 : defaultPageSize);\r\n    };\r\n    table.setPageSize = updater => {\r\n      table.setPagination(old => {\r\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\r\n        const topRowIndex = old.pageSize * old.pageIndex;\r\n        const pageIndex = Math.floor(topRowIndex / pageSize);\r\n        return {\r\n          ...old,\r\n          pageIndex,\r\n          pageSize\r\n        };\r\n      });\r\n    };\r\n    //deprecated\r\n    table.setPageCount = updater => table.setPagination(old => {\r\n      var _table$options$pageCo;\r\n      let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\r\n      if (typeof newPageCount === 'number') {\r\n        newPageCount = Math.max(-1, newPageCount);\r\n      }\r\n      return {\r\n        ...old,\r\n        pageCount: newPageCount\r\n      };\r\n    });\r\n    table.getPageOptions = memo(() => [table.getPageCount()], pageCount => {\r\n      let pageOptions = [];\r\n      if (pageCount && pageCount > 0) {\r\n        pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\r\n      }\r\n      return pageOptions;\r\n    }, getMemoOptions(table.options, 'debugTable', 'getPageOptions'));\r\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0;\r\n    table.getCanNextPage = () => {\r\n      const {\r\n        pageIndex\r\n      } = table.getState().pagination;\r\n      const pageCount = table.getPageCount();\r\n      if (pageCount === -1) {\r\n        return true;\r\n      }\r\n      if (pageCount === 0) {\r\n        return false;\r\n      }\r\n      return pageIndex < pageCount - 1;\r\n    };\r\n    table.previousPage = () => {\r\n      return table.setPageIndex(old => old - 1);\r\n    };\r\n    table.nextPage = () => {\r\n      return table.setPageIndex(old => {\r\n        return old + 1;\r\n      });\r\n    };\r\n    table.firstPage = () => {\r\n      return table.setPageIndex(0);\r\n    };\r\n    table.lastPage = () => {\r\n      return table.setPageIndex(table.getPageCount() - 1);\r\n    };\r\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel();\r\n    table.getPaginationRowModel = () => {\r\n      if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\r\n        table._getPaginationRowModel = table.options.getPaginationRowModel(table);\r\n      }\r\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\r\n        return table.getPrePaginationRowModel();\r\n      }\r\n      return table._getPaginationRowModel();\r\n    };\r\n    table.getPageCount = () => {\r\n      var _table$options$pageCo2;\r\n      return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getRowCount() / table.getState().pagination.pageSize);\r\n    };\r\n    table.getRowCount = () => {\r\n      var _table$options$rowCou;\r\n      return (_table$options$rowCou = table.options.rowCount) != null ? _table$options$rowCou : table.getPrePaginationRowModel().rows.length;\r\n    };\r\n  }\r\n};\r\n\r\n//\r\n\r\nconst getDefaultRowPinningState = () => ({\r\n  top: [],\r\n  bottom: []\r\n});\r\nconst RowPinning = {\r\n  getInitialState: state => {\r\n    return {\r\n      rowPinning: getDefaultRowPinningState(),\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onRowPinningChange: makeStateUpdater('rowPinning', table)\r\n    };\r\n  },\r\n  createRow: (row, table) => {\r\n    row.pin = (position, includeLeafRows, includeParentRows) => {\r\n      const leafRowIds = includeLeafRows ? row.getLeafRows().map(_ref => {\r\n        let {\r\n          id\r\n        } = _ref;\r\n        return id;\r\n      }) : [];\r\n      const parentRowIds = includeParentRows ? row.getParentRows().map(_ref2 => {\r\n        let {\r\n          id\r\n        } = _ref2;\r\n        return id;\r\n      }) : [];\r\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds]);\r\n      table.setRowPinning(old => {\r\n        var _old$top3, _old$bottom3;\r\n        if (position === 'bottom') {\r\n          var _old$top, _old$bottom;\r\n          return {\r\n            top: ((_old$top = old == null ? void 0 : old.top) != null ? _old$top : []).filter(d => !(rowIds != null && rowIds.has(d))),\r\n            bottom: [...((_old$bottom = old == null ? void 0 : old.bottom) != null ? _old$bottom : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)]\r\n          };\r\n        }\r\n        if (position === 'top') {\r\n          var _old$top2, _old$bottom2;\r\n          return {\r\n            top: [...((_old$top2 = old == null ? void 0 : old.top) != null ? _old$top2 : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)],\r\n            bottom: ((_old$bottom2 = old == null ? void 0 : old.bottom) != null ? _old$bottom2 : []).filter(d => !(rowIds != null && rowIds.has(d)))\r\n          };\r\n        }\r\n        return {\r\n          top: ((_old$top3 = old == null ? void 0 : old.top) != null ? _old$top3 : []).filter(d => !(rowIds != null && rowIds.has(d))),\r\n          bottom: ((_old$bottom3 = old == null ? void 0 : old.bottom) != null ? _old$bottom3 : []).filter(d => !(rowIds != null && rowIds.has(d)))\r\n        };\r\n      });\r\n    };\r\n    row.getCanPin = () => {\r\n      var _ref3;\r\n      const {\r\n        enableRowPinning,\r\n        enablePinning\r\n      } = table.options;\r\n      if (typeof enableRowPinning === 'function') {\r\n        return enableRowPinning(row);\r\n      }\r\n      return (_ref3 = enableRowPinning != null ? enableRowPinning : enablePinning) != null ? _ref3 : true;\r\n    };\r\n    row.getIsPinned = () => {\r\n      const rowIds = [row.id];\r\n      const {\r\n        top,\r\n        bottom\r\n      } = table.getState().rowPinning;\r\n      const isTop = rowIds.some(d => top == null ? void 0 : top.includes(d));\r\n      const isBottom = rowIds.some(d => bottom == null ? void 0 : bottom.includes(d));\r\n      return isTop ? 'top' : isBottom ? 'bottom' : false;\r\n    };\r\n    row.getPinnedIndex = () => {\r\n      var _table$_getPinnedRows, _visiblePinnedRowIds$;\r\n      const position = row.getIsPinned();\r\n      if (!position) return -1;\r\n      const visiblePinnedRowIds = (_table$_getPinnedRows = table._getPinnedRows(position)) == null ? void 0 : _table$_getPinnedRows.map(_ref4 => {\r\n        let {\r\n          id\r\n        } = _ref4;\r\n        return id;\r\n      });\r\n      return (_visiblePinnedRowIds$ = visiblePinnedRowIds == null ? void 0 : visiblePinnedRowIds.indexOf(row.id)) != null ? _visiblePinnedRowIds$ : -1;\r\n    };\r\n  },\r\n  createTable: table => {\r\n    table.setRowPinning = updater => table.options.onRowPinningChange == null ? void 0 : table.options.onRowPinningChange(updater);\r\n    table.resetRowPinning = defaultState => {\r\n      var _table$initialState$r, _table$initialState;\r\n      return table.setRowPinning(defaultState ? getDefaultRowPinningState() : (_table$initialState$r = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.rowPinning) != null ? _table$initialState$r : getDefaultRowPinningState());\r\n    };\r\n    table.getIsSomeRowsPinned = position => {\r\n      var _pinningState$positio;\r\n      const pinningState = table.getState().rowPinning;\r\n      if (!position) {\r\n        var _pinningState$top, _pinningState$bottom;\r\n        return Boolean(((_pinningState$top = pinningState.top) == null ? void 0 : _pinningState$top.length) || ((_pinningState$bottom = pinningState.bottom) == null ? void 0 : _pinningState$bottom.length));\r\n      }\r\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\r\n    };\r\n    table._getPinnedRows = memo(position => [table.getRowModel().rows, table.getState().rowPinning[position], position], (visibleRows, pinnedRowIds, position) => {\r\n      var _table$options$keepPi;\r\n      const rows = ((_table$options$keepPi = table.options.keepPinnedRows) != null ? _table$options$keepPi : true) ?\r\n      //get all rows that are pinned even if they would not be otherwise visible\r\n      //account for expanded parent rows, but not pagination or filtering\r\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => {\r\n        const row = table.getRow(rowId, true);\r\n        return row.getIsAllParentsExpanded() ? row : null;\r\n      }) :\r\n      //else get only visible rows that are pinned\r\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => visibleRows.find(row => row.id === rowId));\r\n      return rows.filter(Boolean).map(d => ({\r\n        ...d,\r\n        position\r\n      }));\r\n    }, getMemoOptions(table.options, 'debugRows', '_getPinnedRows'));\r\n    table.getTopRows = () => table._getPinnedRows('top');\r\n    table.getBottomRows = () => table._getPinnedRows('bottom');\r\n    table.getCenterRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top, table.getState().rowPinning.bottom], (allRows, top, bottom) => {\r\n      const topAndBottom = new Set([...(top != null ? top : []), ...(bottom != null ? bottom : [])]);\r\n      return allRows.filter(d => !topAndBottom.has(d.id));\r\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterRows'));\r\n  }\r\n};\r\n\r\n//\r\n\r\nconst RowSelection = {\r\n  getInitialState: state => {\r\n    return {\r\n      rowSelection: {},\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\r\n      enableRowSelection: true,\r\n      enableMultiRowSelection: true,\r\n      enableSubRowSelection: true\r\n      // enableGroupingRowSelection: false,\r\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\r\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\r\n    };\r\n  },\r\n  createTable: table => {\r\n    table.setRowSelection = updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);\r\n    table.resetRowSelection = defaultState => {\r\n      var _table$initialState$r;\r\n      return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\r\n    };\r\n    table.toggleAllRowsSelected = value => {\r\n      table.setRowSelection(old => {\r\n        value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\r\n        const rowSelection = {\r\n          ...old\r\n        };\r\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\r\n\r\n        // We don't use `mutateRowIsSelected` here for performance reasons.\r\n        // All of the rows are flat already, so it wouldn't be worth it\r\n        if (value) {\r\n          preGroupedFlatRows.forEach(row => {\r\n            if (!row.getCanSelect()) {\r\n              return;\r\n            }\r\n            rowSelection[row.id] = true;\r\n          });\r\n        } else {\r\n          preGroupedFlatRows.forEach(row => {\r\n            delete rowSelection[row.id];\r\n          });\r\n        }\r\n        return rowSelection;\r\n      });\r\n    };\r\n    table.toggleAllPageRowsSelected = value => table.setRowSelection(old => {\r\n      const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\r\n      const rowSelection = {\r\n        ...old\r\n      };\r\n      table.getRowModel().rows.forEach(row => {\r\n        mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table);\r\n      });\r\n      return rowSelection;\r\n    });\r\n\r\n    // addRowSelectionRange: rowId => {\r\n    //   const {\r\n    //     rows,\r\n    //     rowsById,\r\n    //     options: { selectGroupingRows, selectSubRows },\r\n    //   } = table\r\n\r\n    //   const findSelectedRow = (rows: Row[]) => {\r\n    //     let found\r\n    //     rows.find(d => {\r\n    //       if (d.getIsSelected()) {\r\n    //         found = d\r\n    //         return true\r\n    //       }\r\n    //       const subFound = findSelectedRow(d.subRows || [])\r\n    //       if (subFound) {\r\n    //         found = subFound\r\n    //         return true\r\n    //       }\r\n    //       return false\r\n    //     })\r\n    //     return found\r\n    //   }\r\n\r\n    //   const firstRow = findSelectedRow(rows) || rows[0]\r\n    //   const lastRow = rowsById[rowId]\r\n\r\n    //   let include = false\r\n    //   const selectedRowIds = {}\r\n\r\n    //   const addRow = (row: Row) => {\r\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\r\n    //       rowsById,\r\n    //       selectGroupingRows: selectGroupingRows!,\r\n    //       selectSubRows: selectSubRows!,\r\n    //     })\r\n    //   }\r\n\r\n    //   table.rows.forEach(row => {\r\n    //     const isFirstRow = row.id === firstRow.id\r\n    //     const isLastRow = row.id === lastRow.id\r\n\r\n    //     if (isFirstRow || isLastRow) {\r\n    //       if (!include) {\r\n    //         include = true\r\n    //       } else if (include) {\r\n    //         addRow(row)\r\n    //         include = false\r\n    //       }\r\n    //     }\r\n\r\n    //     if (include) {\r\n    //       addRow(row)\r\n    //     }\r\n    //   })\r\n\r\n    //   table.setRowSelection(selectedRowIds)\r\n    // },\r\n    table.getPreSelectedRowModel = () => table.getCoreRowModel();\r\n    table.getSelectedRowModel = memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\r\n      if (!Object.keys(rowSelection).length) {\r\n        return {\r\n          rows: [],\r\n          flatRows: [],\r\n          rowsById: {}\r\n        };\r\n      }\r\n      return selectRowsFn(table, rowModel);\r\n    }, getMemoOptions(table.options, 'debugTable', 'getSelectedRowModel'));\r\n    table.getFilteredSelectedRowModel = memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\r\n      if (!Object.keys(rowSelection).length) {\r\n        return {\r\n          rows: [],\r\n          flatRows: [],\r\n          rowsById: {}\r\n        };\r\n      }\r\n      return selectRowsFn(table, rowModel);\r\n    }, getMemoOptions(table.options, 'debugTable', 'getFilteredSelectedRowModel'));\r\n    table.getGroupedSelectedRowModel = memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\r\n      if (!Object.keys(rowSelection).length) {\r\n        return {\r\n          rows: [],\r\n          flatRows: [],\r\n          rowsById: {}\r\n        };\r\n      }\r\n      return selectRowsFn(table, rowModel);\r\n    }, getMemoOptions(table.options, 'debugTable', 'getGroupedSelectedRowModel'));\r\n\r\n    ///\r\n\r\n    // getGroupingRowCanSelect: rowId => {\r\n    //   const row = table.getRow(rowId)\r\n\r\n    //   if (!row) {\r\n    //     throw new Error()\r\n    //   }\r\n\r\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\r\n    //     return table.options.enableGroupingRowSelection(row)\r\n    //   }\r\n\r\n    //   return table.options.enableGroupingRowSelection ?? false\r\n    // },\r\n\r\n    table.getIsAllRowsSelected = () => {\r\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\r\n      const {\r\n        rowSelection\r\n      } = table.getState();\r\n      let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\r\n      if (isAllRowsSelected) {\r\n        if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\r\n          isAllRowsSelected = false;\r\n        }\r\n      }\r\n      return isAllRowsSelected;\r\n    };\r\n    table.getIsAllPageRowsSelected = () => {\r\n      const paginationFlatRows = table.getPaginationRowModel().flatRows.filter(row => row.getCanSelect());\r\n      const {\r\n        rowSelection\r\n      } = table.getState();\r\n      let isAllPageRowsSelected = !!paginationFlatRows.length;\r\n      if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\r\n        isAllPageRowsSelected = false;\r\n      }\r\n      return isAllPageRowsSelected;\r\n    };\r\n    table.getIsSomeRowsSelected = () => {\r\n      var _table$getState$rowSe;\r\n      const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\r\n      return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\r\n    };\r\n    table.getIsSomePageRowsSelected = () => {\r\n      const paginationFlatRows = table.getPaginationRowModel().flatRows;\r\n      return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter(row => row.getCanSelect()).some(d => d.getIsSelected() || d.getIsSomeSelected());\r\n    };\r\n    table.getToggleAllRowsSelectedHandler = () => {\r\n      return e => {\r\n        table.toggleAllRowsSelected(e.target.checked);\r\n      };\r\n    };\r\n    table.getToggleAllPageRowsSelectedHandler = () => {\r\n      return e => {\r\n        table.toggleAllPageRowsSelected(e.target.checked);\r\n      };\r\n    };\r\n  },\r\n  createRow: (row, table) => {\r\n    row.toggleSelected = (value, opts) => {\r\n      const isSelected = row.getIsSelected();\r\n      table.setRowSelection(old => {\r\n        var _opts$selectChildren;\r\n        value = typeof value !== 'undefined' ? value : !isSelected;\r\n        if (row.getCanSelect() && isSelected === value) {\r\n          return old;\r\n        }\r\n        const selectedRowIds = {\r\n          ...old\r\n        };\r\n        mutateRowIsSelected(selectedRowIds, row.id, value, (_opts$selectChildren = opts == null ? void 0 : opts.selectChildren) != null ? _opts$selectChildren : true, table);\r\n        return selectedRowIds;\r\n      });\r\n    };\r\n    row.getIsSelected = () => {\r\n      const {\r\n        rowSelection\r\n      } = table.getState();\r\n      return isRowSelected(row, rowSelection);\r\n    };\r\n    row.getIsSomeSelected = () => {\r\n      const {\r\n        rowSelection\r\n      } = table.getState();\r\n      return isSubRowSelected(row, rowSelection) === 'some';\r\n    };\r\n    row.getIsAllSubRowsSelected = () => {\r\n      const {\r\n        rowSelection\r\n      } = table.getState();\r\n      return isSubRowSelected(row, rowSelection) === 'all';\r\n    };\r\n    row.getCanSelect = () => {\r\n      var _table$options$enable;\r\n      if (typeof table.options.enableRowSelection === 'function') {\r\n        return table.options.enableRowSelection(row);\r\n      }\r\n      return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\r\n    };\r\n    row.getCanSelectSubRows = () => {\r\n      var _table$options$enable2;\r\n      if (typeof table.options.enableSubRowSelection === 'function') {\r\n        return table.options.enableSubRowSelection(row);\r\n      }\r\n      return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\r\n    };\r\n    row.getCanMultiSelect = () => {\r\n      var _table$options$enable3;\r\n      if (typeof table.options.enableMultiRowSelection === 'function') {\r\n        return table.options.enableMultiRowSelection(row);\r\n      }\r\n      return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\r\n    };\r\n    row.getToggleSelectedHandler = () => {\r\n      const canSelect = row.getCanSelect();\r\n      return e => {\r\n        var _target;\r\n        if (!canSelect) return;\r\n        row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\r\n      };\r\n    };\r\n  }\r\n};\r\nconst mutateRowIsSelected = (selectedRowIds, id, value, includeChildren, table) => {\r\n  var _row$subRows;\r\n  const row = table.getRow(id, true);\r\n\r\n  // const isGrouped = row.getIsGrouped()\r\n\r\n  // if ( // TODO: enforce grouping row selection rules\r\n  //   !isGrouped ||\r\n  //   (isGrouped && table.options.enableGroupingRowSelection)\r\n  // ) {\r\n  if (value) {\r\n    if (!row.getCanMultiSelect()) {\r\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\r\n    }\r\n    if (row.getCanSelect()) {\r\n      selectedRowIds[id] = true;\r\n    }\r\n  } else {\r\n    delete selectedRowIds[id];\r\n  }\r\n  // }\r\n\r\n  if (includeChildren && (_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\r\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, includeChildren, table));\r\n  }\r\n};\r\nfunction selectRowsFn(table, rowModel) {\r\n  const rowSelection = table.getState().rowSelection;\r\n  const newSelectedFlatRows = [];\r\n  const newSelectedRowsById = {};\r\n\r\n  // Filters top level and nested rows\r\n  const recurseRows = function (rows, depth) {\r\n    return rows.map(row => {\r\n      var _row$subRows2;\r\n      const isSelected = isRowSelected(row, rowSelection);\r\n      if (isSelected) {\r\n        newSelectedFlatRows.push(row);\r\n        newSelectedRowsById[row.id] = row;\r\n      }\r\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\r\n        row = {\r\n          ...row,\r\n          subRows: recurseRows(row.subRows)\r\n        };\r\n      }\r\n      if (isSelected) {\r\n        return row;\r\n      }\r\n    }).filter(Boolean);\r\n  };\r\n  return {\r\n    rows: recurseRows(rowModel.rows),\r\n    flatRows: newSelectedFlatRows,\r\n    rowsById: newSelectedRowsById\r\n  };\r\n}\r\nfunction isRowSelected(row, selection) {\r\n  var _selection$row$id;\r\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\r\n}\r\nfunction isSubRowSelected(row, selection, table) {\r\n  var _row$subRows3;\r\n  if (!((_row$subRows3 = row.subRows) != null && _row$subRows3.length)) return false;\r\n  let allChildrenSelected = true;\r\n  let someSelected = false;\r\n  row.subRows.forEach(subRow => {\r\n    // Bail out early if we know both of these\r\n    if (someSelected && !allChildrenSelected) {\r\n      return;\r\n    }\r\n    if (subRow.getCanSelect()) {\r\n      if (isRowSelected(subRow, selection)) {\r\n        someSelected = true;\r\n      } else {\r\n        allChildrenSelected = false;\r\n      }\r\n    }\r\n\r\n    // Check row selection of nested subrows\r\n    if (subRow.subRows && subRow.subRows.length) {\r\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection);\r\n      if (subRowChildrenSelected === 'all') {\r\n        someSelected = true;\r\n      } else if (subRowChildrenSelected === 'some') {\r\n        someSelected = true;\r\n        allChildrenSelected = false;\r\n      } else {\r\n        allChildrenSelected = false;\r\n      }\r\n    }\r\n  });\r\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\r\n}\r\n\r\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\r\nconst alphanumeric = (rowA, rowB, columnId) => {\r\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\r\n};\r\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\r\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\r\n};\r\n\r\n// The text filter is more basic (less numeric support)\r\n// but is much faster\r\nconst text = (rowA, rowB, columnId) => {\r\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\r\n};\r\n\r\n// The text filter is more basic (less numeric support)\r\n// but is much faster\r\nconst textCaseSensitive = (rowA, rowB, columnId) => {\r\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\r\n};\r\nconst datetime = (rowA, rowB, columnId) => {\r\n  const a = rowA.getValue(columnId);\r\n  const b = rowB.getValue(columnId);\r\n\r\n  // Can handle nullish values\r\n  // Use > and < because == (and ===) doesn't work with\r\n  // Date objects (would require calling getTime()).\r\n  return a > b ? 1 : a < b ? -1 : 0;\r\n};\r\nconst basic = (rowA, rowB, columnId) => {\r\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\r\n};\r\n\r\n// Utils\r\n\r\nfunction compareBasic(a, b) {\r\n  return a === b ? 0 : a > b ? 1 : -1;\r\n}\r\nfunction toString(a) {\r\n  if (typeof a === 'number') {\r\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\r\n      return '';\r\n    }\r\n    return String(a);\r\n  }\r\n  if (typeof a === 'string') {\r\n    return a;\r\n  }\r\n  return '';\r\n}\r\n\r\n// Mixed sorting is slow, but very inclusive of many edge cases.\r\n// It handles numbers, mixed alphanumeric combinations, and even\r\n// null, undefined, and Infinity\r\nfunction compareAlphanumeric(aStr, bStr) {\r\n  // Split on number groups, but keep the delimiter\r\n  // Then remove falsey split values\r\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\r\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\r\n\r\n  // While\r\n  while (a.length && b.length) {\r\n    const aa = a.shift();\r\n    const bb = b.shift();\r\n    const an = parseInt(aa, 10);\r\n    const bn = parseInt(bb, 10);\r\n    const combo = [an, bn].sort();\r\n\r\n    // Both are string\r\n    if (isNaN(combo[0])) {\r\n      if (aa > bb) {\r\n        return 1;\r\n      }\r\n      if (bb > aa) {\r\n        return -1;\r\n      }\r\n      continue;\r\n    }\r\n\r\n    // One is a string, one is a number\r\n    if (isNaN(combo[1])) {\r\n      return isNaN(an) ? -1 : 1;\r\n    }\r\n\r\n    // Both are numbers\r\n    if (an > bn) {\r\n      return 1;\r\n    }\r\n    if (bn > an) {\r\n      return -1;\r\n    }\r\n  }\r\n  return a.length - b.length;\r\n}\r\n\r\n// Exports\r\n\r\nconst sortingFns = {\r\n  alphanumeric,\r\n  alphanumericCaseSensitive,\r\n  text,\r\n  textCaseSensitive,\r\n  datetime,\r\n  basic\r\n};\r\n\r\n//\r\n\r\nconst RowSorting = {\r\n  getInitialState: state => {\r\n    return {\r\n      sorting: [],\r\n      ...state\r\n    };\r\n  },\r\n  getDefaultColumnDef: () => {\r\n    return {\r\n      sortingFn: 'auto',\r\n      sortUndefined: 1\r\n    };\r\n  },\r\n  getDefaultOptions: table => {\r\n    return {\r\n      onSortingChange: makeStateUpdater('sorting', table),\r\n      isMultiSortEvent: e => {\r\n        return e.shiftKey;\r\n      }\r\n    };\r\n  },\r\n  createColumn: (column, table) => {\r\n    column.getAutoSortingFn = () => {\r\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10);\r\n      let isString = false;\r\n      for (const row of firstRows) {\r\n        const value = row == null ? void 0 : row.getValue(column.id);\r\n        if (Object.prototype.toString.call(value) === '[object Date]') {\r\n          return sortingFns.datetime;\r\n        }\r\n        if (typeof value === 'string') {\r\n          isString = true;\r\n          if (value.split(reSplitAlphaNumeric).length > 1) {\r\n            return sortingFns.alphanumeric;\r\n          }\r\n        }\r\n      }\r\n      if (isString) {\r\n        return sortingFns.text;\r\n      }\r\n      return sortingFns.basic;\r\n    };\r\n    column.getAutoSortDir = () => {\r\n      const firstRow = table.getFilteredRowModel().flatRows[0];\r\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\r\n      if (typeof value === 'string') {\r\n        return 'asc';\r\n      }\r\n      return 'desc';\r\n    };\r\n    column.getSortingFn = () => {\r\n      var _table$options$sortin, _table$options$sortin2;\r\n      if (!column) {\r\n        throw new Error();\r\n      }\r\n      return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\r\n    };\r\n    column.toggleSorting = (desc, multi) => {\r\n      // if (column.columns.length) {\r\n      //   column.columns.forEach((c, i) => {\r\n      //     if (c.id) {\r\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\r\n      //     }\r\n      //   })\r\n      //   return\r\n      // }\r\n\r\n      // this needs to be outside of table.setSorting to be in sync with rerender\r\n      const nextSortingOrder = column.getNextSortingOrder();\r\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null;\r\n      table.setSorting(old => {\r\n        // Find any existing sorting for this column\r\n        const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\r\n        const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\r\n        let newSorting = [];\r\n\r\n        // What should we do with this sort action?\r\n        let sortAction;\r\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\r\n\r\n        // Multi-mode\r\n        if (old != null && old.length && column.getCanMultiSort() && multi) {\r\n          if (existingSorting) {\r\n            sortAction = 'toggle';\r\n          } else {\r\n            sortAction = 'add';\r\n          }\r\n        } else {\r\n          // Normal mode\r\n          if (old != null && old.length && existingIndex !== old.length - 1) {\r\n            sortAction = 'replace';\r\n          } else if (existingSorting) {\r\n            sortAction = 'toggle';\r\n          } else {\r\n            sortAction = 'replace';\r\n          }\r\n        }\r\n\r\n        // Handle toggle states that will remove the sorting\r\n        if (sortAction === 'toggle') {\r\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\r\n          if (!hasManualValue) {\r\n            // Is our intention to remove?\r\n            if (!nextSortingOrder) {\r\n              sortAction = 'remove';\r\n            }\r\n          }\r\n        }\r\n        if (sortAction === 'add') {\r\n          var _table$options$maxMul;\r\n          newSorting = [...old, {\r\n            id: column.id,\r\n            desc: nextDesc\r\n          }];\r\n          // Take latest n columns\r\n          newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\r\n        } else if (sortAction === 'toggle') {\r\n          // This flips (or sets) the\r\n          newSorting = old.map(d => {\r\n            if (d.id === column.id) {\r\n              return {\r\n                ...d,\r\n                desc: nextDesc\r\n              };\r\n            }\r\n            return d;\r\n          });\r\n        } else if (sortAction === 'remove') {\r\n          newSorting = old.filter(d => d.id !== column.id);\r\n        } else {\r\n          newSorting = [{\r\n            id: column.id,\r\n            desc: nextDesc\r\n          }];\r\n        }\r\n        return newSorting;\r\n      });\r\n    };\r\n    column.getFirstSortDir = () => {\r\n      var _ref, _column$columnDef$sor;\r\n      const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\r\n      return sortDescFirst ? 'desc' : 'asc';\r\n    };\r\n    column.getNextSortingOrder = multi => {\r\n      var _table$options$enable, _table$options$enable2;\r\n      const firstSortDirection = column.getFirstSortDir();\r\n      const isSorted = column.getIsSorted();\r\n      if (!isSorted) {\r\n        return firstSortDirection;\r\n      }\r\n      if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\r\n      // If enableSortRemove, enable in general\r\n      multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\r\n      ) {\r\n        return false;\r\n      }\r\n      return isSorted === 'desc' ? 'asc' : 'desc';\r\n    };\r\n    column.getCanSort = () => {\r\n      var _column$columnDef$ena, _table$options$enable3;\r\n      return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\r\n    };\r\n    column.getCanMultiSort = () => {\r\n      var _ref2, _column$columnDef$ena2;\r\n      return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\r\n    };\r\n    column.getIsSorted = () => {\r\n      var _table$getState$sorti;\r\n      const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\r\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\r\n    };\r\n    column.getSortIndex = () => {\r\n      var _table$getState$sorti2, _table$getState$sorti3;\r\n      return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\r\n    };\r\n    column.clearSorting = () => {\r\n      //clear sorting for just 1 column\r\n      table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\r\n    };\r\n    column.getToggleSortingHandler = () => {\r\n      const canSort = column.getCanSort();\r\n      return e => {\r\n        if (!canSort) return;\r\n        e.persist == null || e.persist();\r\n        column.toggleSorting == null || column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\r\n      };\r\n    };\r\n  },\r\n  createTable: table => {\r\n    table.setSorting = updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);\r\n    table.resetSorting = defaultState => {\r\n      var _table$initialState$s, _table$initialState;\r\n      table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\r\n    };\r\n    table.getPreSortedRowModel = () => table.getGroupedRowModel();\r\n    table.getSortedRowModel = () => {\r\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\r\n        table._getSortedRowModel = table.options.getSortedRowModel(table);\r\n      }\r\n      if (table.options.manualSorting || !table._getSortedRowModel) {\r\n        return table.getPreSortedRowModel();\r\n      }\r\n      return table._getSortedRowModel();\r\n    };\r\n  }\r\n};\r\n\r\nconst builtInFeatures = [Headers, ColumnVisibility, ColumnOrdering, ColumnPinning, ColumnFaceting, ColumnFiltering, GlobalFaceting,\r\n//depends on ColumnFaceting\r\nGlobalFiltering,\r\n//depends on ColumnFiltering\r\nRowSorting, ColumnGrouping,\r\n//depends on RowSorting\r\nRowExpanding, RowPagination, RowPinning, RowSelection, ColumnSizing];\r\n\r\n//\r\n\r\nfunction createTable(options) {\r\n  var _options$_features, _options$initialState;\r\n  if ( true && (options.debugAll || options.debugTable)) {\r\n    console.info('Creating Table Instance...');\r\n  }\r\n  const _features = [...builtInFeatures, ...((_options$_features = options._features) != null ? _options$_features : [])];\r\n  let table = {\r\n    _features\r\n  };\r\n  const defaultOptions = table._features.reduce((obj, feature) => {\r\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\r\n  }, {});\r\n  const mergeOptions = options => {\r\n    if (table.options.mergeOptions) {\r\n      return table.options.mergeOptions(defaultOptions, options);\r\n    }\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  };\r\n  const coreInitialState = {};\r\n  let initialState = {\r\n    ...coreInitialState,\r\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\r\n  };\r\n  table._features.forEach(feature => {\r\n    var _feature$getInitialSt;\r\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\r\n  });\r\n  const queued = [];\r\n  let queuedTimeout = false;\r\n  const coreInstance = {\r\n    _features,\r\n    options: {\r\n      ...defaultOptions,\r\n      ...options\r\n    },\r\n    initialState,\r\n    _queue: cb => {\r\n      queued.push(cb);\r\n      if (!queuedTimeout) {\r\n        queuedTimeout = true;\r\n\r\n        // Schedule a microtask to run the queued callbacks after\r\n        // the current call stack (render, etc) has finished.\r\n        Promise.resolve().then(() => {\r\n          while (queued.length) {\r\n            queued.shift()();\r\n          }\r\n          queuedTimeout = false;\r\n        }).catch(error => setTimeout(() => {\r\n          throw error;\r\n        }));\r\n      }\r\n    },\r\n    reset: () => {\r\n      table.setState(table.initialState);\r\n    },\r\n    setOptions: updater => {\r\n      const newOptions = functionalUpdate(updater, table.options);\r\n      table.options = mergeOptions(newOptions);\r\n    },\r\n    getState: () => {\r\n      return table.options.state;\r\n    },\r\n    setState: updater => {\r\n      table.options.onStateChange == null || table.options.onStateChange(updater);\r\n    },\r\n    _getRowId: (row, index, parent) => {\r\n      var _table$options$getRow;\r\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\r\n    },\r\n    getCoreRowModel: () => {\r\n      if (!table._getCoreRowModel) {\r\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\r\n      }\r\n      return table._getCoreRowModel();\r\n    },\r\n    // The final calls start at the bottom of the model,\r\n    // expanded rows, which then work their way up\r\n\r\n    getRowModel: () => {\r\n      return table.getPaginationRowModel();\r\n    },\r\n    //in next version, we should just pass in the row model as the optional 2nd arg\r\n    getRow: (id, searchAll) => {\r\n      let row = (searchAll ? table.getPrePaginationRowModel() : table.getRowModel()).rowsById[id];\r\n      if (!row) {\r\n        row = table.getCoreRowModel().rowsById[id];\r\n        if (!row) {\r\n          if (true) {\r\n            throw new Error(`getRow could not find row with ID: ${id}`);\r\n          }\r\n          throw new Error();\r\n        }\r\n      }\r\n      return row;\r\n    },\r\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\r\n      var _defaultColumn;\r\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\r\n      return {\r\n        header: props => {\r\n          const resolvedColumnDef = props.header.column.columnDef;\r\n          if (resolvedColumnDef.accessorKey) {\r\n            return resolvedColumnDef.accessorKey;\r\n          }\r\n          if (resolvedColumnDef.accessorFn) {\r\n            return resolvedColumnDef.id;\r\n          }\r\n          return null;\r\n        },\r\n        // footer: props => props.header.column.id,\r\n        cell: props => {\r\n          var _props$renderValue$to, _props$renderValue;\r\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null || _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\r\n        },\r\n        ...table._features.reduce((obj, feature) => {\r\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\r\n        }, {}),\r\n        ...defaultColumn\r\n      };\r\n    }, getMemoOptions(options, 'debugColumns', '_getDefaultColumnDef')),\r\n    _getColumnDefs: () => table.options.columns,\r\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\r\n      const recurseColumns = function (columnDefs, parent, depth) {\r\n        if (depth === void 0) {\r\n          depth = 0;\r\n        }\r\n        return columnDefs.map(columnDef => {\r\n          const column = createColumn(table, columnDef, depth, parent);\r\n          const groupingColumnDef = columnDef;\r\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\r\n          return column;\r\n        });\r\n      };\r\n      return recurseColumns(columnDefs);\r\n    }, getMemoOptions(options, 'debugColumns', 'getAllColumns')),\r\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\r\n      return allColumns.flatMap(column => {\r\n        return column.getFlatColumns();\r\n      });\r\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumns')),\r\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\r\n      return flatColumns.reduce((acc, column) => {\r\n        acc[column.id] = column;\r\n        return acc;\r\n      }, {});\r\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumnsById')),\r\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\r\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\r\n      return orderColumns(leafColumns);\r\n    }, getMemoOptions(options, 'debugColumns', 'getAllLeafColumns')),\r\n    getColumn: columnId => {\r\n      const column = table._getAllFlatColumnsById()[columnId];\r\n      if ( true && !column) {\r\n        console.error(`[Table] Column with id '${columnId}' does not exist.`);\r\n      }\r\n      return column;\r\n    }\r\n  };\r\n  Object.assign(table, coreInstance);\r\n  for (let index = 0; index < table._features.length; index++) {\r\n    const feature = table._features[index];\r\n    feature == null || feature.createTable == null || feature.createTable(table);\r\n  }\r\n  return table;\r\n}\r\n\r\nfunction getCoreRowModel() {\r\n  return table => memo(() => [table.options.data], data => {\r\n    const rowModel = {\r\n      rows: [],\r\n      flatRows: [],\r\n      rowsById: {}\r\n    };\r\n    const accessRows = function (originalRows, depth, parentRow) {\r\n      if (depth === void 0) {\r\n        depth = 0;\r\n      }\r\n      const rows = [];\r\n      for (let i = 0; i < originalRows.length; i++) {\r\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\r\n        // if (!id) {\r\n        //   if (process.env.NODE_ENV !== 'production') {\r\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\r\n        //   }\r\n        // }\r\n\r\n        // Make the row\r\n        const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, undefined, parentRow == null ? void 0 : parentRow.id);\r\n\r\n        // Keep track of every row in a flat array\r\n        rowModel.flatRows.push(row);\r\n        // Also keep track of every row by its ID\r\n        rowModel.rowsById[row.id] = row;\r\n        // Push table row into parent\r\n        rows.push(row);\r\n\r\n        // Get the original subrows\r\n        if (table.options.getSubRows) {\r\n          var _row$originalSubRows;\r\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\r\n\r\n          // Then recursively access them\r\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\r\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\r\n          }\r\n        }\r\n      }\r\n      return rows;\r\n    };\r\n    rowModel.rows = accessRows(data);\r\n    return rowModel;\r\n  }, getMemoOptions(table.options, 'debugTable', 'getRowModel', () => table._autoResetPageIndex()));\r\n}\r\n\r\nfunction getExpandedRowModel() {\r\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\r\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\r\n      return rowModel;\r\n    }\r\n    if (!paginateExpandedRows) {\r\n      // Only expand rows at this point if they are being paginated\r\n      return rowModel;\r\n    }\r\n    return expandRows(rowModel);\r\n  }, getMemoOptions(table.options, 'debugTable', 'getExpandedRowModel'));\r\n}\r\nfunction expandRows(rowModel) {\r\n  const expandedRows = [];\r\n  const handleRow = row => {\r\n    var _row$subRows;\r\n    expandedRows.push(row);\r\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\r\n      row.subRows.forEach(handleRow);\r\n    }\r\n  };\r\n  rowModel.rows.forEach(handleRow);\r\n  return {\r\n    rows: expandedRows,\r\n    flatRows: rowModel.flatRows,\r\n    rowsById: rowModel.rowsById\r\n  };\r\n}\r\n\r\nfunction getFacetedMinMaxValues() {\r\n  return (table, columnId) => memo(() => {\r\n    var _table$getColumn;\r\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\r\n  }, facetedRowModel => {\r\n    var _facetedRowModel$flat;\r\n    if (!facetedRowModel) return undefined;\r\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getUniqueValues(columnId);\r\n    if (typeof firstValue === 'undefined') {\r\n      return undefined;\r\n    }\r\n    let facetedMinMaxValues = [firstValue, firstValue];\r\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\r\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\r\n      for (let j = 0; j < values.length; j++) {\r\n        const value = values[j];\r\n        if (value < facetedMinMaxValues[0]) {\r\n          facetedMinMaxValues[0] = value;\r\n        } else if (value > facetedMinMaxValues[1]) {\r\n          facetedMinMaxValues[1] = value;\r\n        }\r\n      }\r\n    }\r\n    return facetedMinMaxValues;\r\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedMinMaxValues'));\r\n}\r\n\r\nfunction filterRows(rows, filterRowImpl, table) {\r\n  if (table.options.filterFromLeafRows) {\r\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\r\n  }\r\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\r\n}\r\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\r\n  var _table$options$maxLea;\r\n  const newFilteredFlatRows = [];\r\n  const newFilteredRowsById = {};\r\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\r\n  const recurseFilterRows = function (rowsToFilter, depth) {\r\n    if (depth === void 0) {\r\n      depth = 0;\r\n    }\r\n    const rows = [];\r\n\r\n    // Filter from children up first\r\n    for (let i = 0; i < rowsToFilter.length; i++) {\r\n      var _row$subRows;\r\n      let row = rowsToFilter[i];\r\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\r\n      newRow.columnFilters = row.columnFilters;\r\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\r\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\r\n        row = newRow;\r\n        if (filterRow(row) && !newRow.subRows.length) {\r\n          rows.push(row);\r\n          newFilteredRowsById[row.id] = row;\r\n          newFilteredFlatRows.push(row);\r\n          continue;\r\n        }\r\n        if (filterRow(row) || newRow.subRows.length) {\r\n          rows.push(row);\r\n          newFilteredRowsById[row.id] = row;\r\n          newFilteredFlatRows.push(row);\r\n          continue;\r\n        }\r\n      } else {\r\n        row = newRow;\r\n        if (filterRow(row)) {\r\n          rows.push(row);\r\n          newFilteredRowsById[row.id] = row;\r\n          newFilteredFlatRows.push(row);\r\n        }\r\n      }\r\n    }\r\n    return rows;\r\n  };\r\n  return {\r\n    rows: recurseFilterRows(rowsToFilter),\r\n    flatRows: newFilteredFlatRows,\r\n    rowsById: newFilteredRowsById\r\n  };\r\n}\r\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\r\n  var _table$options$maxLea2;\r\n  const newFilteredFlatRows = [];\r\n  const newFilteredRowsById = {};\r\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\r\n\r\n  // Filters top level and nested rows\r\n  const recurseFilterRows = function (rowsToFilter, depth) {\r\n    if (depth === void 0) {\r\n      depth = 0;\r\n    }\r\n    // Filter from parents downward first\r\n\r\n    const rows = [];\r\n\r\n    // Apply the filter to any subRows\r\n    for (let i = 0; i < rowsToFilter.length; i++) {\r\n      let row = rowsToFilter[i];\r\n      const pass = filterRow(row);\r\n      if (pass) {\r\n        var _row$subRows2;\r\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\r\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\r\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\r\n          row = newRow;\r\n        }\r\n        rows.push(row);\r\n        newFilteredFlatRows.push(row);\r\n        newFilteredRowsById[row.id] = row;\r\n      }\r\n    }\r\n    return rows;\r\n  };\r\n  return {\r\n    rows: recurseFilterRows(rowsToFilter),\r\n    flatRows: newFilteredFlatRows,\r\n    rowsById: newFilteredRowsById\r\n  };\r\n}\r\n\r\nfunction getFacetedRowModel() {\r\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\r\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\r\n      return preRowModel;\r\n    }\r\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\r\n    const filterRowsImpl = row => {\r\n      // Horizontally filter rows through each column\r\n      for (let i = 0; i < filterableIds.length; i++) {\r\n        if (row.columnFilters[filterableIds[i]] === false) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\r\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedRowModel'));\r\n}\r\n\r\nfunction getFacetedUniqueValues() {\r\n  return (table, columnId) => memo(() => {\r\n    var _table$getColumn;\r\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\r\n  }, facetedRowModel => {\r\n    if (!facetedRowModel) return new Map();\r\n    let facetedUniqueValues = new Map();\r\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\r\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\r\n      for (let j = 0; j < values.length; j++) {\r\n        const value = values[j];\r\n        if (facetedUniqueValues.has(value)) {\r\n          var _facetedUniqueValues$;\r\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\r\n        } else {\r\n          facetedUniqueValues.set(value, 1);\r\n        }\r\n      }\r\n    }\r\n    return facetedUniqueValues;\r\n  }, getMemoOptions(table.options, 'debugTable', `getFacetedUniqueValues_${columnId}`));\r\n}\r\n\r\nfunction getFilteredRowModel() {\r\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\r\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\r\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\r\n        rowModel.flatRows[i].columnFilters = {};\r\n        rowModel.flatRows[i].columnFiltersMeta = {};\r\n      }\r\n      return rowModel;\r\n    }\r\n    const resolvedColumnFilters = [];\r\n    const resolvedGlobalFilters = [];\r\n    (columnFilters != null ? columnFilters : []).forEach(d => {\r\n      var _filterFn$resolveFilt;\r\n      const column = table.getColumn(d.id);\r\n      if (!column) {\r\n        return;\r\n      }\r\n      const filterFn = column.getFilterFn();\r\n      if (!filterFn) {\r\n        if (true) {\r\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\r\n        }\r\n        return;\r\n      }\r\n      resolvedColumnFilters.push({\r\n        id: d.id,\r\n        filterFn,\r\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\r\n      });\r\n    });\r\n    const filterableIds = columnFilters.map(d => d.id);\r\n    const globalFilterFn = table.getGlobalFilterFn();\r\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\r\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\r\n      filterableIds.push('__global__');\r\n      globallyFilterableColumns.forEach(column => {\r\n        var _globalFilterFn$resol;\r\n        resolvedGlobalFilters.push({\r\n          id: column.id,\r\n          filterFn: globalFilterFn,\r\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\r\n        });\r\n      });\r\n    }\r\n    let currentColumnFilter;\r\n    let currentGlobalFilter;\r\n\r\n    // Flag the prefiltered row model with each filter state\r\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\r\n      const row = rowModel.flatRows[j];\r\n      row.columnFilters = {};\r\n      if (resolvedColumnFilters.length) {\r\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\r\n          currentColumnFilter = resolvedColumnFilters[i];\r\n          const id = currentColumnFilter.id;\r\n\r\n          // Tag the row with the column filter state\r\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\r\n            row.columnFiltersMeta[id] = filterMeta;\r\n          });\r\n        }\r\n      }\r\n      if (resolvedGlobalFilters.length) {\r\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\r\n          currentGlobalFilter = resolvedGlobalFilters[i];\r\n          const id = currentGlobalFilter.id;\r\n          // Tag the row with the first truthy global filter state\r\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\r\n            row.columnFiltersMeta[id] = filterMeta;\r\n          })) {\r\n            row.columnFilters.__global__ = true;\r\n            break;\r\n          }\r\n        }\r\n        if (row.columnFilters.__global__ !== true) {\r\n          row.columnFilters.__global__ = false;\r\n        }\r\n      }\r\n    }\r\n    const filterRowsImpl = row => {\r\n      // Horizontally filter rows through each column\r\n      for (let i = 0; i < filterableIds.length; i++) {\r\n        if (row.columnFilters[filterableIds[i]] === false) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    // Filter final rows using all of the active filters\r\n    return filterRows(rowModel.rows, filterRowsImpl, table);\r\n  }, getMemoOptions(table.options, 'debugTable', 'getFilteredRowModel', () => table._autoResetPageIndex()));\r\n}\r\n\r\nfunction getGroupedRowModel() {\r\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\r\n    if (!rowModel.rows.length || !grouping.length) {\r\n      return rowModel;\r\n    }\r\n\r\n    // Filter the grouping list down to columns that exist\r\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\r\n    const groupedFlatRows = [];\r\n    const groupedRowsById = {};\r\n    // const onlyGroupedFlatRows: Row[] = [];\r\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\r\n    // const nonGroupedFlatRows: Row[] = [];\r\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\r\n\r\n    // Recursively group the data\r\n    const groupUpRecursively = function (rows, depth, parentId) {\r\n      if (depth === void 0) {\r\n        depth = 0;\r\n      }\r\n      // Grouping depth has been been met\r\n      // Stop grouping and simply rewrite thd depth and row relationships\r\n      if (depth >= existingGrouping.length) {\r\n        return rows.map(row => {\r\n          row.depth = depth;\r\n          groupedFlatRows.push(row);\r\n          groupedRowsById[row.id] = row;\r\n          if (row.subRows) {\r\n            row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id);\r\n          }\r\n          return row;\r\n        });\r\n      }\r\n      const columnId = existingGrouping[depth];\r\n\r\n      // Group the rows together for this level\r\n      const rowGroupsMap = groupBy(rows, columnId);\r\n\r\n      // Peform aggregations for each group\r\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\r\n        let [groupingValue, groupedRows] = _ref;\r\n        let id = `${columnId}:${groupingValue}`;\r\n        id = parentId ? `${parentId}>${id}` : id;\r\n\r\n        // First, Recurse to group sub rows before aggregation\r\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\r\n\r\n        // Flatten the leaf rows of the rows in this group\r\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\r\n        const row = createRow(table, id, leafRows[0].original, index, depth, undefined, parentId);\r\n        Object.assign(row, {\r\n          groupingColumnId: columnId,\r\n          groupingValue,\r\n          subRows,\r\n          leafRows,\r\n          getValue: columnId => {\r\n            // Don't aggregate columns that are in the grouping\r\n            if (existingGrouping.includes(columnId)) {\r\n              if (row._valuesCache.hasOwnProperty(columnId)) {\r\n                return row._valuesCache[columnId];\r\n              }\r\n              if (groupedRows[0]) {\r\n                var _groupedRows$0$getVal;\r\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\r\n              }\r\n              return row._valuesCache[columnId];\r\n            }\r\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\r\n              return row._groupingValuesCache[columnId];\r\n            }\r\n\r\n            // Aggregate the values\r\n            const column = table.getColumn(columnId);\r\n            const aggregateFn = column == null ? void 0 : column.getAggregationFn();\r\n            if (aggregateFn) {\r\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\r\n              return row._groupingValuesCache[columnId];\r\n            }\r\n          }\r\n        });\r\n        subRows.forEach(subRow => {\r\n          groupedFlatRows.push(subRow);\r\n          groupedRowsById[subRow.id] = subRow;\r\n          // if (subRow.getIsGrouped?.()) {\r\n          //   onlyGroupedFlatRows.push(subRow);\r\n          //   onlyGroupedRowsById[subRow.id] = subRow;\r\n          // } else {\r\n          //   nonGroupedFlatRows.push(subRow);\r\n          //   nonGroupedRowsById[subRow.id] = subRow;\r\n          // }\r\n        });\r\n        return row;\r\n      });\r\n      return aggregatedGroupedRows;\r\n    };\r\n    const groupedRows = groupUpRecursively(rowModel.rows, 0);\r\n    groupedRows.forEach(subRow => {\r\n      groupedFlatRows.push(subRow);\r\n      groupedRowsById[subRow.id] = subRow;\r\n      // if (subRow.getIsGrouped?.()) {\r\n      //   onlyGroupedFlatRows.push(subRow);\r\n      //   onlyGroupedRowsById[subRow.id] = subRow;\r\n      // } else {\r\n      //   nonGroupedFlatRows.push(subRow);\r\n      //   nonGroupedRowsById[subRow.id] = subRow;\r\n      // }\r\n    });\r\n    return {\r\n      rows: groupedRows,\r\n      flatRows: groupedFlatRows,\r\n      rowsById: groupedRowsById\r\n    };\r\n  }, getMemoOptions(table.options, 'debugTable', 'getGroupedRowModel', () => {\r\n    table._queue(() => {\r\n      table._autoResetExpanded();\r\n      table._autoResetPageIndex();\r\n    });\r\n  }));\r\n}\r\nfunction groupBy(rows, columnId) {\r\n  const groupMap = new Map();\r\n  return rows.reduce((map, row) => {\r\n    const resKey = `${row.getGroupingValue(columnId)}`;\r\n    const previous = map.get(resKey);\r\n    if (!previous) {\r\n      map.set(resKey, [row]);\r\n    } else {\r\n      previous.push(row);\r\n    }\r\n    return map;\r\n  }, groupMap);\r\n}\r\n\r\nfunction getPaginationRowModel(opts) {\r\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\r\n    if (!rowModel.rows.length) {\r\n      return rowModel;\r\n    }\r\n    const {\r\n      pageSize,\r\n      pageIndex\r\n    } = pagination;\r\n    let {\r\n      rows,\r\n      flatRows,\r\n      rowsById\r\n    } = rowModel;\r\n    const pageStart = pageSize * pageIndex;\r\n    const pageEnd = pageStart + pageSize;\r\n    rows = rows.slice(pageStart, pageEnd);\r\n    let paginatedRowModel;\r\n    if (!table.options.paginateExpandedRows) {\r\n      paginatedRowModel = expandRows({\r\n        rows,\r\n        flatRows,\r\n        rowsById\r\n      });\r\n    } else {\r\n      paginatedRowModel = {\r\n        rows,\r\n        flatRows,\r\n        rowsById\r\n      };\r\n    }\r\n    paginatedRowModel.flatRows = [];\r\n    const handleRow = row => {\r\n      paginatedRowModel.flatRows.push(row);\r\n      if (row.subRows.length) {\r\n        row.subRows.forEach(handleRow);\r\n      }\r\n    };\r\n    paginatedRowModel.rows.forEach(handleRow);\r\n    return paginatedRowModel;\r\n  }, getMemoOptions(table.options, 'debugTable', 'getPaginationRowModel'));\r\n}\r\n\r\nfunction getSortedRowModel() {\r\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\r\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\r\n      return rowModel;\r\n    }\r\n    const sortingState = table.getState().sorting;\r\n    const sortedFlatRows = [];\r\n\r\n    // Filter out sortings that correspond to non existing columns\r\n    const availableSorting = sortingState.filter(sort => {\r\n      var _table$getColumn;\r\n      return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();\r\n    });\r\n    const columnInfoById = {};\r\n    availableSorting.forEach(sortEntry => {\r\n      const column = table.getColumn(sortEntry.id);\r\n      if (!column) return;\r\n      columnInfoById[sortEntry.id] = {\r\n        sortUndefined: column.columnDef.sortUndefined,\r\n        invertSorting: column.columnDef.invertSorting,\r\n        sortingFn: column.getSortingFn()\r\n      };\r\n    });\r\n    const sortData = rows => {\r\n      // This will also perform a stable sorting using the row index\r\n      // if needed.\r\n      const sortedData = rows.map(row => ({\r\n        ...row\r\n      }));\r\n      sortedData.sort((rowA, rowB) => {\r\n        for (let i = 0; i < availableSorting.length; i += 1) {\r\n          var _sortEntry$desc;\r\n          const sortEntry = availableSorting[i];\r\n          const columnInfo = columnInfoById[sortEntry.id];\r\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\r\n          let sortInt = 0;\r\n\r\n          // All sorting ints should always return in ascending order\r\n          if (columnInfo.sortUndefined) {\r\n            const aValue = rowA.getValue(sortEntry.id);\r\n            const bValue = rowB.getValue(sortEntry.id);\r\n            const aUndefined = aValue === undefined;\r\n            const bUndefined = bValue === undefined;\r\n            if (aUndefined || bUndefined) {\r\n              sortInt = aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\r\n            }\r\n          }\r\n          if (sortInt === 0) {\r\n            sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\r\n          }\r\n\r\n          // If sorting is non-zero, take care of desc and inversion\r\n          if (sortInt !== 0) {\r\n            if (isDesc) {\r\n              sortInt *= -1;\r\n            }\r\n            if (columnInfo.invertSorting) {\r\n              sortInt *= -1;\r\n            }\r\n            return sortInt;\r\n          }\r\n        }\r\n        return rowA.index - rowB.index;\r\n      });\r\n\r\n      // If there are sub-rows, sort them\r\n      sortedData.forEach(row => {\r\n        var _row$subRows;\r\n        sortedFlatRows.push(row);\r\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\r\n          row.subRows = sortData(row.subRows);\r\n        }\r\n      });\r\n      return sortedData;\r\n    };\r\n    return {\r\n      rows: sortData(rowModel.rows),\r\n      flatRows: sortedFlatRows,\r\n      rowsById: rowModel.rowsById\r\n    };\r\n  }, getMemoOptions(table.options, 'debugTable', 'getSortedRowModel', () => table._autoResetPageIndex()));\r\n}\r\n\r\n\r\n//# sourceMappingURL=index.mjs.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/table-core/build/lib/index.mjs\n");

/***/ })

};
;